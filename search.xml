<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>XCode14.3打包错误</title>
    <url>/2023/10/08/XCode14-3%E6%89%93%E5%8C%85%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<ul>
<li>在有pods的项目中，xcode14.3之后打包出现如下错误</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command phasescriptexecution failed with a nonzero exit code</span><br></pre></td></tr></table></figure>

<ul>
<li>原因及解决方法如下</li>
</ul>
<p>There is an issue with Cocoapods now, because Xcode 14.3 is now using a relative path in its symlink for frameworks.</p>
<p>Either wait for release of Cocoapods version 1.12.1 or make this simple change in your <code>Pods-APPNAME-frameworks.sh</code> file:</p>
<p>Replace:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ -L &quot;$&#123;source&#125;&quot; ]; then</span><br><span class="line">  echo &quot;Symlinked...&quot;</span><br><span class="line">  source=&quot;$(readlink &quot;$&#123;source&#125;&quot;)&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>with:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ -L &quot;$&#123;source&#125;&quot; ]; then</span><br><span class="line">  echo &quot;Symlinked...&quot;</span><br><span class="line">  source=&quot;$(readlink -f &quot;$&#123;source&#125;&quot;)&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>Note that <code>-f</code> was added.</p>
<p>参考链接：</p>
<p><a href="https://developer.apple.com/forums/thread/727525">https://developer.apple.com/forums/thread/727525</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>It is my first blog</title>
    <url>/2020/08/16/first%20blog/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>grep用法</title>
    <url>/2023/08/16/grep%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h3 id="grep用法"><a href="#grep用法" class="headerlink" title="grep用法"></a>grep用法</h3><h4 id="1-参数解析"><a href="#1-参数解析" class="headerlink" title="1.参数解析"></a>1.参数解析</h4><ol>
<li><p>-E 使用正则表达式选项<br><code>grep -E &quot;[1-9]&quot;</code>  匹配数字1-9中的任意一个</p>
</li>
<li><p>-n 显示匹配行及行号（number）</p>
</li>
<li><p>-c 只输出匹配行的计数（count）  </p>
</li>
<li><p>-r 递归搜索，会搜索子目录</p>
<span id="more"></span>
</li>
<li><p>-d skip 忽略子目录   </p>
</li>
<li><p>-i 忽略大小写（ignore）   </p>
</li>
<li><p>-v 显示不包含匹配文本的行（取反）</p>
</li>
<li><p>-l 只列出匹配的文件名</p>
</li>
<li><p>-L 列出不匹配的文件名</p>
</li>
<li><p>grep -w pattern files 只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)</p>
</li>
<li><p>&lt; 和 &gt; 分别标注单词的开始与结尾。grep ‘&lt;man&gt;’ 只匹配’man’，而不是’Batman’或’manic’等其他的字符串。</p>
</li>
<li><p>-o 只显示匹配行中匹配正则表达式的那部分</p>
</li>
</ol>
<blockquote>
<p>只显示匹配行中匹配正则表达式的那部分</p>
</blockquote>
<h4 id="2-正则表达式"><a href="#2-正则表达式" class="headerlink" title="2.正则表达式"></a>2.正则表达式</h4><h5 id="1-主要参数"><a href="#1-主要参数" class="headerlink" title="1.主要参数"></a>1.主要参数</h5><ol>
<li>\ 正则中的转义符号</li>
<li>. 表示单个字符  * 0个或者多个  + 1个或者多个</li>
<li>.* 表示0个或者多个字符（可以没有字符，也s可以多个字符）</li>
<li>.+ 表示1个或者多个字符（至少一个字符）</li>
<li>^ 匹配正则表达式的开始</li>
<li>&amp; 匹配正则表达式的结束</li>
<li>[] 单个字符 如：[A-Z]表示A-Z的任意一个字母，[0-9a-zA-Z]</li>
<li>（）括号里面表示一个整体 ^(abc) 表示以abc开始的</li>
</ol>
<p><img src="/../images/grep%E7%94%A8%E6%B3%95/image-20240908003240021-5726764.png" alt="image-20240908003240021"></p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title>combine学习</title>
    <url>/2024/09/01/Swift/Study_Combine/</url>
    <content><![CDATA[<h1 id="Swift-Combine-iOS-13"><a href="#Swift-Combine-iOS-13" class="headerlink" title="Swift Combine - iOS 13"></a><a href="https://developer.apple.com/documentation/combine">Swift Combine - iOS 13</a></h1><h2 id="轉移到-Combine"><a href="#轉移到-Combine" class="headerlink" title="轉移到 Combine"></a><a href="https://medium.com/jeremy-xue-s-blog/swift-%E8%BD%89%E7%A7%BB%E5%88%B0-combine-9b9cc91a0748">轉移到 Combine</a></h2><ul>
<li>先做一個<a href="https://heckj.github.io/swiftui-notes/index_zh-CN.html">公用程式</a>，印出範例用…</li>
<li>其實，Combine的功能有很大一部分是用到<a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E6%88%90%E5%8A%9F%E5%92%8C%E5%A4%B1%E6%95%97%E4%BA%8C%E6%93%87%E4%B8%80%E7%9A%84-result-type-e234c6fccc9c">Result&lt;Value, Error&gt;</a>的設定，成功和失敗二擇一的參數應用…</li>
<li>Combine也是有所謂的<a href="https://ithelp.ithome.com.tw/articles/10217930">生命週期</a></li>
<li>當然<a href="https://rxmarbles.com/">RxJS Marbles的彈珠圖</a>也是可以參考的…</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">example</span>(<span class="params">of</span> <span class="params">description</span>: <span class="type">String</span>, <span class="params">action</span>: () -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\n</span>=== 範例: <span class="subst">\(description)</span> ===&quot;</span>)</span><br><span class="line">    action()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lesson-01-Notification-vs-Combine"><a href="#Lesson-01-Notification-vs-Combine" class="headerlink" title="Lesson.01 - Notification vs Combine"></a>Lesson.01 - Notification vs Combine</h2><h3 id="通知-Notification"><a href="#通知-Notification" class="headerlink" title="通知 - Notification"></a><a href="https://www.appcoda.com.tw/notificationcenter/">通知 - Notification</a></h3><ul>
<li>先以一個iOS基本的Notification為基準</li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;Notification&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> myNotification <span class="operator">=</span> <span class="type">Notification</span>.<span class="type">Name</span>(<span class="string">&quot;MyNotification&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> center <span class="operator">=</span> <span class="type">NotificationCenter</span>.default</span><br><span class="line">    <span class="keyword">let</span> observer <span class="operator">=</span> center.addObserver(forName: myNotification, object: <span class="literal">nil</span>, queue: <span class="literal">nil</span>) &#123; notification <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(notification.object<span class="operator">!</span>)</span>&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">let</span> object <span class="operator">=</span> <span class="string">&quot;「張君雅小妹妹，恁兜的泡麵已經煮好了，恁阿嬤限妳一分鐘內趕緊回去呷；哪嘸，到時麵若爛去，伊是概不負責！」&quot;</span></span><br><span class="line">    </span><br><span class="line">    center.post(name: myNotification, object: object)</span><br><span class="line">    center.removeObserver(observer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: Notification ===</span><br><span class="line">「張君雅小妹妹，恁兜的泡麵已經煮好了，恁阿嬤限妳一分鐘內趕緊回去呷；哪嘸，到時麵若爛去，伊是概不負責！」</span><br></pre></td></tr></table></figure>

<h3 id="發布者-Publisher"><a href="#發布者-Publisher" class="headerlink" title="發布者 - Publisher"></a><a href="https://developer.apple.com/documentation/foundation/notificationcenter/publisher">發布者 - Publisher</a></h3><ul>
<li>可以類比成NotificationCenter.default.post()的功能</li>
<li>有發布訊息的功能 (單向)</li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;Publisher&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> myNotification <span class="operator">=</span> <span class="type">Notification</span>.<span class="type">Name</span>(<span class="string">&quot;MyNotification&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> center <span class="operator">=</span> <span class="type">NotificationCenter</span>.default</span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> center.publisher(for: myNotification, object: <span class="literal">nil</span>)</span><br><span class="line">    </span><br><span class="line">    center.post(name: myNotification, object: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="訂閱者-Subscriber"><a href="#訂閱者-Subscriber" class="headerlink" title="訂閱者 - Subscriber"></a>訂閱者 - Subscriber</h3><ul>
<li>可以類比成NotificationCenter.default.addObserver()的功能</li>
<li>有收接訊息的功能 (單向)</li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;Subscriber&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> myNotification <span class="operator">=</span> <span class="type">Notification</span>.<span class="type">Name</span>(<span class="string">&quot;MyNotification&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> center <span class="operator">=</span> <span class="type">NotificationCenter</span>.default</span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> center.publisher(for: myNotification, object: <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">let</span> subscription <span class="operator">=</span> publisher.sink &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;收到從發布者傳來的通知了&quot;</span>) &#125;</span><br><span class="line">    </span><br><span class="line">    center.post(name: myNotification, object: <span class="literal">nil</span>)</span><br><span class="line">    subscription.cancel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="我心中的Combine"><a href="#我心中的Combine" class="headerlink" title="我心中的Combine"></a>我心中的Combine</h2><p><img src="/../../source/images/Study_Combine/Combine.png"></p>
<h2 id="初學Publisher"><a href="#初學Publisher" class="headerlink" title="初學Publisher"></a>初學Publisher</h2><h3 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h3><ul>
<li>使用Combine時，最基本的Publisher</li>
<li>一個發布者，可由多個訂閱者接收</li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;Just&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> just <span class="operator">=</span> <span class="type">Just</span>(<span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> subscription_1 <span class="operator">=</span> just.sink(</span><br><span class="line">        receiveCompletion: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Received completion: &quot;</span>, <span class="variable">$0</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        receiveValue: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Received value: &quot;</span>, <span class="variable">$0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> subscription_2 <span class="operator">=</span> just.sink(</span><br><span class="line">        receiveCompletion: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Received completion (another): &quot;</span>, <span class="variable">$0</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        receiveValue: &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Received value (another): &quot;</span>, <span class="variable">$0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">    subscription_1.cancel()</span><br><span class="line">    subscription_2.cancel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: Just ===</span><br><span class="line">Received value:  Hello world!</span><br><span class="line">Received completion:  finished</span><br><span class="line">Received value (another):  Hello world!</span><br><span class="line">Received completion (another):  finished</span><br></pre></td></tr></table></figure>

<h2 id="Combine運算子"><a href="#Combine運算子" class="headerlink" title="Combine運算子"></a>Combine運算子</h2><h3 id="儲存數值-assign-to-on"><a href="#儲存數值-assign-to-on" class="headerlink" title="儲存數值 - assign(to:on:)"></a><a href="https://developer.apple.com/documentation/combine/just/assign(to:on:&#41;">儲存數值 - assign(to:on:)</a></h3><ul>
<li>萬物都可以轉成Publisher，試著把Array轉成Publisher</li>
<li>利用assign(to:on:)，把發布者發布的值存到變數裡面</li>
<li>從didSet()取值 &#x3D;&gt; <a href="https://davidlinnn.medium.com/swift-4-kvo-%E7%AD%86%E8%A8%98-4c89a996e022">KVO - Key-Value Observing</a></li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;assign(to:on:)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SomeObject</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> value: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">didSet</span> &#123; <span class="built_in">print</span>(value) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> array <span class="operator">=</span> [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world!&quot;</span>]</span><br><span class="line">    <span class="keyword">let</span> object <span class="operator">=</span> <span class="type">SomeObject</span>()</span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> array.publisher</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">_</span> <span class="operator">=</span> publisher.assign(to: \.value, on: object)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: assign(to:on:) ===</span><br><span class="line">Hello</span><br><span class="line">world!</span><br></pre></td></tr></table></figure>

<h3 id="儲存數值-assign-to"><a href="#儲存數值-assign-to" class="headerlink" title="儲存數值 - assign(to:)"></a><a href="https://developer.apple.com/documentation/combine/just/assign(to:&#41;">儲存數值 - assign(to:)</a></h3><ul>
<li>這是個相當經典的例子</li>
<li>利用<a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E6%95%99%E5%AE%A4/swiftui-%E4%BB%80%E9%BA%BC%E6%98%AF-published-observableobject-eb950f8295a">@Published</a>，將變數value轉成Publisher，這時候的value就要用$value來處理</li>
<li>而要存到變數value，就要使用&amp;object來處理</li>
<li>使用<a href="https://developer.apple.com/documentation/combine/just/sink(receivevalue:&#41;">sink()</a>取值，而不是從數值去取值了</li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;assign(to:)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SomeObject</span> &#123;</span><br><span class="line">        <span class="meta">@Published</span> <span class="keyword">var</span> value <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> object <span class="operator">=</span> <span class="type">SomeObject</span>()</span><br><span class="line">    object.<span class="variable">$value</span>.sink &#123; <span class="built_in">print</span>(<span class="string">&quot;收到的值為: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">    </span><br><span class="line">    (<span class="number">0</span><span class="operator">..&lt;</span><span class="number">10</span>).publisher.assign(to: <span class="operator">&amp;</span>object.<span class="variable">$value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: assign(to:) ===</span><br><span class="line">收到的值為: 0</span><br><span class="line">收到的值為: 0</span><br><span class="line">收到的值為: 1</span><br><span class="line">收到的值為: 2</span><br><span class="line">收到的值為: 3</span><br><span class="line">收到的值為: 4</span><br><span class="line">收到的值為: 5</span><br><span class="line">收到的值為: 6</span><br><span class="line">收到的值為: 7</span><br><span class="line">收到的值為: 8</span><br><span class="line">收到的值為: 9</span><br></pre></td></tr></table></figure>

<h3 id="自訂Subscriber"><a href="#自訂Subscriber" class="headerlink" title="自訂Subscriber"></a>自訂Subscriber</h3><ul>
<li>只要使用協定Subscriber就可以自己產生一個自訂Subscriber</li>
<li>如果使用subscription.request(.max(3)) + return .none，就只會印三個，而且不會結束</li>
<li>但如果把return .none改成return .unlimited，就只會印全部，而且會結束</li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;Custom Subscriber&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MagazineSubscriber</span>: <span class="title class_">Subscriber</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">Input</span> <span class="operator">=</span> <span class="type">String</span>                                <span class="comment">// 雜誌名稱是文字</span></span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">Failure</span> <span class="operator">=</span> <span class="type">Never</span>                               <span class="comment">// 不處理錯誤</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">let</span> maxCount <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> subscription: <span class="type">Subscription</span>?</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="params">subscription</span>: <span class="type">Subscription</span>) &#123;</span><br><span class="line">            <span class="built_in">print</span>(subscription)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">self</span>.subscription <span class="operator">=</span> subscription                    <span class="comment">// 在這裡，你可以保存subscription，並告訴出版社你要接收雜誌</span></span><br><span class="line">            subscription.request(.unlimited)                    <span class="comment">// 請求出版商無限制數量的雜誌</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="keyword">_</span> <span class="params">input</span>: <span class="type">Input</span>) -&gt; <span class="type">Subscribers</span>.<span class="type">Demand</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Received value&quot;</span>, input, count)               <span class="comment">// 在這裡，你可以處理收到的雜誌內容</span></span><br><span class="line">            count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (count <span class="operator">&gt;=</span> maxCount) &#123; subscription<span class="operator">?</span>.cancel() &#125;   <span class="comment">// 它表明訂閱者不再需要額外的項目 (目標到達，取消訂閱)</span></span><br><span class="line">            <span class="keyword">return</span> .unlimited                                   <span class="comment">// 請求接收更多的雜誌</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="params">completion</span>: <span class="type">Subscribers</span>.<span class="type">Completion</span>&lt;<span class="type">Never</span>&gt;) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Received completion&quot;</span>, completion)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> magazines <span class="operator">=</span> [<span class="string">&quot;ABC互動英語&quot;</span>, <span class="string">&quot;LIVE互動英語&quot;</span>, <span class="string">&quot;CNN互動英語&quot;</span>, <span class="string">&quot;互動日本語&quot;</span>, <span class="string">&quot;跟我一起學日語&quot;</span>, <span class="string">&quot;KOREA韓語學習誌&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> magazines.publisher                         <span class="comment">// Array =&gt; Publisher</span></span><br><span class="line">    <span class="keyword">let</span> subscriber <span class="operator">=</span> <span class="type">MagazineSubscriber</span>()</span><br><span class="line"></span><br><span class="line">    publisher.subscribe(subscriber)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: Custom Subscriber ===</span><br><span class="line">[<span class="string">&quot;ABC互動英語&quot;</span>, <span class="string">&quot;LIVE互動英語&quot;</span>, <span class="string">&quot;CNN互動英語&quot;</span>, <span class="string">&quot;互動日本語&quot;</span>, <span class="string">&quot;跟我一起學日語&quot;</span>, <span class="string">&quot;KOREA韓語學習誌&quot;</span>]</span><br><span class="line">Received value ABC互動英語 0</span><br><span class="line">Received value LIVE互動英語 1</span><br><span class="line">Received value CNN互動英語 2</span><br></pre></td></tr></table></figure>

<h2 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h2><h3 id="Future-非同步Publisher"><a href="#Future-非同步Publisher" class="headerlink" title="Future - 非同步Publisher"></a><a href="https://developer.apple.com/documentation/combine/future">Future - 非同步Publisher</a></h3><ul>
<li>聽名字就知道，接收未來資料與事件<a href="https://www.jianshu.com/p/c5dbc67fcfcb">非同步</a>的Publisher</li>
<li>在這裡我們讓它停止3秒，再顯示值</li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> subscriptions <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line">example(of: <span class="string">&quot;Future&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">futureIncrement</span>(<span class="params">integer</span>: <span class="type">Int</span>, <span class="params">afterDelay</span> <span class="params">delay</span>: <span class="type">UInt32</span>) -&gt; <span class="type">Future</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt; &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Future</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt; &#123; promise <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Original =&gt; <span class="subst">\(integer)</span>&quot;</span>)</span><br><span class="line">            sleep(delay)</span><br><span class="line">            promise(.success(integer <span class="operator">+</span> <span class="number">1</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> future <span class="operator">=</span> futureIncrement(integer: <span class="number">1</span>, afterDelay: <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    future</span><br><span class="line">        .sink(receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;Completion =&gt; <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;, receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;Value =&gt; <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    future</span><br><span class="line">        .sink(receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;Completion =&gt; <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;, receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;Value =&gt; <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: Future ===</span><br><span class="line">Original =&gt; 1</span><br><span class="line">Value =&gt; 2</span><br><span class="line">Completion =&gt; finished</span><br><span class="line">Value =&gt; 2</span><br><span class="line">Completion =&gt; finished</span><br></pre></td></tr></table></figure>

<h2 id="Subject-Publisher-延展類"><a href="#Subject-Publisher-延展類" class="headerlink" title="Subject - Publisher 延展類"></a><a href="https://louyu.cc/articles/ios-swift/2021/03/?p=2857/">Subject - Publisher 延展類</a></h2><h3 id="PassthroughSubject"><a href="#PassthroughSubject" class="headerlink" title="PassthroughSubject"></a><a href="https://ithelp.ithome.com.tw/articles/10219418">PassthroughSubject</a></h3><ul>
<li>與之前我們討論的 Publisher 不同的是，Subject 的最大特點就是可以手動傳送資料</li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;PassthroughSubject&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">MyError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> test</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringSubscriber</span>: <span class="title class_">Subscriber</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">Input</span> <span class="operator">=</span> <span class="type">String</span></span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">Failure</span> <span class="operator">=</span> <span class="type">MyError</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="params">subscription</span>: <span class="type">Subscription</span>) &#123;</span><br><span class="line">            subscription.request(.max(<span class="number">2</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="keyword">_</span> <span class="params">input</span>: <span class="type">String</span>) -&gt; <span class="type">Subscribers</span>.<span class="type">Demand</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Received value (input): &quot;</span>, input)</span><br><span class="line">            <span class="keyword">return</span> input <span class="operator">==</span> <span class="string">&quot;World&quot;</span> <span class="operator">?</span> .max(<span class="number">1</span>) : .none</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="params">completion</span>: <span class="type">Subscribers</span>.<span class="type">Completion</span>&lt;<span class="type">MyError</span>&gt;) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Received completion (input): &quot;</span>, completion)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> subscriber <span class="operator">=</span> <span class="type">StringSubscriber</span>()</span><br><span class="line">    <span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">MyError</span>&gt;()</span><br><span class="line"></span><br><span class="line">    subject.subscribe(subscriber)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> subscription <span class="operator">=</span> subject</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; completion <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;Received completion (sink): &quot;</span>, completion) &#125;,</span><br><span class="line">            receiveValue: &#123; value <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;Received value (sink): &quot;</span>, value) &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    subject.send(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    subject.send(<span class="string">&quot;World&quot;</span>)</span><br><span class="line"></span><br><span class="line">    subscription.cancel()</span><br><span class="line"></span><br><span class="line">    subject.send(<span class="string">&quot;Still there?&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// subject.send(completion: .failure(MyError.test))</span></span><br><span class="line">    subject.send(completion: .finished)</span><br><span class="line"></span><br><span class="line">    subject.send(<span class="string">&quot;How about another one?&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: PassthroughSubject ===</span><br><span class="line">Received value (sink):  Hello</span><br><span class="line">Received value (input):  Hello</span><br><span class="line">Received value (sink):  World</span><br><span class="line">Received value (input):  World</span><br><span class="line">Received value (input):  Still there?</span><br><span class="line">Received completion:  finished</span><br></pre></td></tr></table></figure>

<h3 id="CurrentValueSubject-Publisher-延展類"><a href="#CurrentValueSubject-Publisher-延展類" class="headerlink" title="CurrentValueSubject - Publisher 延展類"></a><a href="https://www.avanderlee.com/combine/passthroughsubject-currentvaluesubject-explained/">CurrentValueSubject - Publisher 延展類</a></h3><ul>
<li>與 PassthroughSubject 不同，CurrentValueSubject 會保留一個最後的資料，並在被訂閱時將這個資料傳送給下游的 Publisher 或 Subscriber。</li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;CurrentValueSubject&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">CurrentValueSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;(<span class="number">0</span>)	<span class="comment">// 設定初值</span></span><br><span class="line">    </span><br><span class="line">    subject</span><br><span class="line">        .print()</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;First subscription: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    subject.send(<span class="number">1</span>)</span><br><span class="line">    subject.send(<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(subject.value)</span><br><span class="line">    </span><br><span class="line">    subject.value <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(subject.value)</span><br><span class="line"></span><br><span class="line">    subject</span><br><span class="line">        .print()</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;Second subscription:&quot;</span>, <span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    subject.send(completion: .finished)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: CurrentValueSubject ===</span><br><span class="line">receive subscription: (CurrentValueSubject)</span><br><span class="line">request unlimited</span><br><span class="line">receive value: (0)</span><br><span class="line">First subscription: 0</span><br><span class="line">receive value: (1)</span><br><span class="line">First subscription: 1</span><br><span class="line">receive value: (2)</span><br><span class="line">First subscription: 2</span><br><span class="line">2</span><br><span class="line">receive value: (3)</span><br><span class="line">First subscription: 3</span><br><span class="line">3</span><br><span class="line">receive subscription: (CurrentValueSubject)</span><br><span class="line">request unlimited</span><br><span class="line">receive value: (3)</span><br><span class="line">Second subscription: 3</span><br><span class="line">receive finished</span><br><span class="line">receive finished</span><br></pre></td></tr></table></figure>

<h3 id="自動校正Demand"><a href="#自動校正Demand" class="headerlink" title="自動校正Demand"></a><a href="https://developer.apple.com/documentation/combine/subscribers/demand">自動校正Demand</a></h3><ul>
<li>這裡是自動根據輸入的值，去改變Subscribers.Demand</li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;Dynamically adjusting Demand&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">IntSubscriber</span>: <span class="title class_">Subscriber</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">Input</span> <span class="operator">=</span> <span class="type">Int</span></span><br><span class="line">        <span class="keyword">typealias</span> <span class="type">Failure</span> <span class="operator">=</span> <span class="type">Never</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="params">subscription</span>: <span class="type">Subscription</span>) &#123;</span><br><span class="line">            subscription.request(.max(<span class="number">3</span>))   <span class="comment">// .max(3): 初始值</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="keyword">_</span> <span class="params">input</span>: <span class="type">Int</span>) -&gt; <span class="type">Subscribers</span>.<span class="type">Demand</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Received value&quot;</span>, input)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">switch</span> input &#123;                  <span class="comment">// 累加的 =&gt;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> .max(<span class="number">2</span>)          <span class="comment">// .max(3) + .max(2) = .max(4)</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> .max(<span class="number">1</span>)          <span class="comment">// .max(4) + .max(1) = .max(5)</span></span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> .none           <span class="comment">// .max(5)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">receive</span>(<span class="params">completion</span>: <span class="type">Subscribers</span>.<span class="type">Completion</span>&lt;<span class="type">Never</span>&gt;) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Received completion: &quot;</span>, completion)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> subscriber <span class="operator">=</span> <span class="type">IntSubscriber</span>()</span><br><span class="line">    <span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    subject.subscribe(subscriber)</span><br><span class="line">    </span><br><span class="line">    (<span class="number">1</span><span class="operator">...</span><span class="number">10</span>).forEach &#123; subject.send(<span class="variable">$0</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: Dynamically adjusting Demand ===</span><br><span class="line">Received value 1</span><br><span class="line">Received value 2</span><br><span class="line">Received value 3</span><br><span class="line">Received value 4</span><br><span class="line">Received value 5</span><br><span class="line">Received value 6</span><br></pre></td></tr></table></figure>

<h3 id="eraseToAnyPublisher"><a href="#eraseToAnyPublisher" class="headerlink" title="eraseToAnyPublisher()"></a><a href="https://developer.apple.com/documentation/combine/publisher/erasetoanypublisher(;&#41">eraseToAnyPublisher()</a></h3><ul>
<li>轉成AnyPublisher</li>
<li>讓Publisher的類型<a href="https://ithelp.ithome.com.tw/articles/10221967">簡單化</a></li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;Type erasure&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()  <span class="comment">// PassthroughSubject&lt;Int, Never&gt;</span></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> subject.eraseToAnyPublisher()   <span class="comment">// PassthroughSubject&lt;Int, Never&gt; =&gt; AnyPublisher&lt;Int, Never&gt;</span></span><br><span class="line">    </span><br><span class="line">    publisher</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    subject.send(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// publisher.send(1)    // ∵ 轉成了AnyPublisher&lt;Int, Never&gt; ∴ 沒有send()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: Type erasure ===</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h3 id="async-await"><a href="#async-await" class="headerlink" title="async &#x2F; await"></a>async &#x2F; await</h3><ul>
<li>非同步使用的範例</li>
<li></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;async / await&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">CurrentValueSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;(<span class="number">0</span>)    <span class="comment">// 設定初值 = 0</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">Task</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">await</span> element <span class="keyword">in</span> subject.values &#123; <span class="built_in">print</span>(<span class="string">&quot;Element: <span class="subst">\(element)</span>&quot;</span>) &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Completed.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    subject.send(<span class="number">1</span>)     <span class="comment">// 可以使用在非同步之上</span></span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    subject.send(<span class="number">2</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    subject.send(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    subject.send(completion: .finished)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: async / await ===</span><br><span class="line">Element: 0</span><br><span class="line">Element: 1</span><br><span class="line">Element: 2</span><br><span class="line">Element: 3</span><br><span class="line">Completed.</span><br></pre></td></tr></table></figure>

<h2 id="Lesson-02-Operators也是Publisher"><a href="#Lesson-02-Operators也是Publisher" class="headerlink" title="Lesson.02 - Operators也是Publisher"></a>Lesson.02 - Operators也是Publisher</h2><h3 id="collect"><a href="#collect" class="headerlink" title="collect()"></a><a href="https://juejin.cn/post/7017265258263740424">collect()</a></h3><ul>
<li>將單一值做分組…</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;collect&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> array <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    array.publisher</span><br><span class="line">        .collect(<span class="number">2</span>)     <span class="comment">// 2個2個一組，預設是1組；如果不加它的話，就是一個一個單獨輸出</span></span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: collect ===</span><br><span class="line">[<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>]</span><br><span class="line">[<span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br><span class="line">[<span class="string">&quot;E&quot;</span>]</span><br><span class="line">finished</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map()"></a><a href="https://cocoacasts.com/combine-essentials-how-to-use-combine-map-and-compactmap-operators">map()</a></h3><ul>
<li>其實這個跟swift的<a href="https://franksios.medium.com/swift3-%E9%AB%98%E9%9A%8E%E5%87%BD%E6%95%B8-higher-order-function-a97cf4577a11">高階函數 - map</a>很像，把值一個個處理，然後轉成另一種數值…</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;map&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> array <span class="operator">=</span> [<span class="number">123</span>, <span class="number">4</span>, <span class="number">56</span>]</span><br><span class="line">    <span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">NumberFormatter</span>()</span><br><span class="line">    </span><br><span class="line">    formatter.numberStyle <span class="operator">=</span> .spellOut</span><br><span class="line">    </span><br><span class="line">    array.publisher</span><br><span class="line">        .map(&#123; value <span class="keyword">in</span></span><br><span class="line">            formatter.string(for: <span class="type">NSNumber</span>(integerLiteral: value)) <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: map ===</span><br><span class="line">one hundred twenty-three</span><br><span class="line">four</span><br><span class="line">fifty-six</span><br></pre></td></tr></table></figure>

<ul>
<li>使用座標(x,y)當成map()的範例</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;mapping key paths&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Coordinate</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    publisher</span><br><span class="line">        .map(\.x, \.y)      <span class="comment">// 也可以這樣取值 (Coordinate.x / Coordinate.y)</span></span><br><span class="line">        .sink(receiveValue: &#123; x, y <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> quadrant <span class="operator">=</span> quadrantOf(x: x, y: y) <span class="keyword">else</span> &#123; <span class="built_in">print</span>(<span class="string">&quot;座標在 (<span class="subst">\(x)</span>, <span class="subst">\(y)</span>) 在軸上&quot;</span>); <span class="keyword">return</span> &#125;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;座標在 (<span class="subst">\(x)</span>, <span class="subst">\(y)</span>) 第<span class="subst">\(quadrant)</span>象限&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    publisher.send(<span class="type">Coordinate</span>(x: <span class="number">10</span>, y: <span class="operator">-</span><span class="number">8</span>))</span><br><span class="line">    publisher.send(<span class="type">Coordinate</span>(x: <span class="number">0</span>, y: <span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: mapping key paths ===</span><br><span class="line">座標在 (10, -8) 第4象限</span><br><span class="line">座標在 (0, 5) 在軸上</span><br></pre></td></tr></table></figure>

<h3 id="tryMap"><a href="#tryMap" class="headerlink" title="tryMap()"></a><a href="https://juejin.cn/post/7023214404007264263">tryMap()</a></h3><ul>
<li>有錯誤處理的map</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;tryMap&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Just</span>(<span class="string">&quot;資料夾名稱不存在!!!&quot;</span>)</span><br><span class="line">        .tryMap &#123; <span class="keyword">try</span> <span class="type">FileManager</span>.default.contentsOfDirectory(atPath: <span class="variable">$0</span>) &#125;</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;Completion: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;ReceiveValue: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: tryMap ===</span><br><span class="line">Completion: failure(Error Domain=NSCocoaErrorDomain Code=260 <span class="string">&quot;The folder “資料夾名稱不存在!!!” doesn’t exist.&quot;</span> UserInfo=&#123;NSUserStringVariant=(</span><br><span class="line">    Folder</span><br><span class="line">), NSFilePath=資料夾名稱不存在!!!, NSUnderlyingError=0x600003aff900 &#123;Error Domain=NSPOSIXErrorDomain Code=2 <span class="string">&quot;No such file or directory&quot;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a><a href="https://kingnight.github.io/programming/2020/10/29/Combine%E4%B8%AD%E9%87%8D%E8%A6%81%E5%87%BD%E6%95%B0flatMap.html">flatMap()</a></h3><ul>
<li>字如其義，就是扁平化的意思 - flat，把Publishers &#x3D;&gt; 單一個Publisher (Publisher轉換)</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;flatMap&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">decode</span>(<span class="keyword">_</span> <span class="params">codes</span>: [<span class="type">Int</span>]) -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt; &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Just</span>(codes.compactMap &#123; code <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> (<span class="number">32</span><span class="operator">...</span><span class="number">255</span>).contains(code) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>(<span class="type">UnicodeScalar</span>(code) <span class="operator">??</span> <span class="string">&quot; &quot;</span>)</span><br><span class="line">        &#125;.joined())</span><br><span class="line">        .eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> array <span class="operator">=</span> [<span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">44</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>]    <span class="comment">/// Hello, World!!! (ASCII)</span></span><br><span class="line">    </span><br><span class="line">    array.publisher</span><br><span class="line">        .collect()</span><br><span class="line">        .flatMap(decode)                                                                <span class="comment">/// 可以接收一個個數值 Publishers =&gt; 單一個Publisher</span></span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: flatMap ===</span><br><span class="line">Hello, World!!!</span><br></pre></td></tr></table></figure>

<h3 id="replaceNil-with"><a href="#replaceNil-with" class="headerlink" title="replaceNil(with:)"></a><a href="https://cocoacasts.com/combine-essentials-how-to-use-combine%27s-replacenil-operator">replaceNil(with:)</a></h3><ul>
<li>字如其義，就是處理nil值，有點像 (value ?? “-“)</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 06. 處理nil數值 =&gt; 有點像 (value ?? &quot;-&quot;)</span></span><br><span class="line">example(of: <span class="string">&quot;replaceNil&quot;</span>) &#123;</span><br><span class="line">    [<span class="string">&quot;A&quot;</span>, <span class="literal">nil</span>, <span class="string">&quot;C&quot;</span>].publisher</span><br><span class="line">        .eraseToAnyPublisher()</span><br><span class="line">        .replaceNil(with: <span class="string">&quot;-&quot;</span>)      <span class="comment">/// 可以試試不使用它的結果</span></span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: replaceNil ===</span><br><span class="line">A</span><br><span class="line">-</span><br><span class="line">C</span><br></pre></td></tr></table></figure>

<h3 id="replaceEmpty-with"><a href="#replaceEmpty-with" class="headerlink" title="replaceEmpty(with:)"></a><a href="https://juejin.cn/post/7017356750735015966">replaceEmpty(with:)</a></h3><ul>
<li><p>字如其義，就是處理空值，用在演示或測試用</p>
</li>
<li><pre><code class="swift">example(of: &quot;replaceEmpty(with:)&quot;) &#123;
  
  let empty = Empty&lt;String, Never&gt;()
  
  empty
      .replaceEmpty(with: &quot;Test&quot;)      /// 可以試試不使用它的結果
      .sink(
          receiveCompletion: &#123; print($0) &#125;,
          receiveValue: &#123; print($0) &#125;
      )
      .store(in: &amp;subscriptions)
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: replaceEmpty(with:) ===</span><br><span class="line">Test</span><br><span class="line">finished</span><br></pre></td></tr></table></figure>

<h3 id="scan-https-juejin-cn-s-swift-combine-scan-example"><a href="#scan-https-juejin-cn-s-swift-combine-scan-example" class="headerlink" title="[scan()](https://juejin.cn/s/swift combine scan example)"></a>[scan()](<a href="https://juejin.cn/s/swift">https://juejin.cn/s/swift</a> combine scan example)</h3><ul>
<li><p>累加之用，很像<a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E6%95%99%E5%AE%A4/array-%E7%9A%84%E9%AB%98%E9%9A%8E%E5%87%BD%E5%BC%8F-filter-map-and-reduce-39fb8ba5a9f7">reduce()</a></p>
</li>
<li><pre><code class="swift">example(of: &quot;scan&quot;) &#123;
  
  let initValue = 50
  let maxCount = 10
  var dailyGainLoss: Int &#123; .random(in: -maxCount...maxCount) &#125;    /// 將產生-10 ~ 10的隨時數
  
  let june2023 = (0..&lt;maxCount)                                   /// 產生10組
      .map &#123; _ in dailyGainLoss &#125;                                 /// [Int]
      .publisher
  
  june2023
      .scan(initValue) &#123; latest, current in
          max(0, latest + current)                                /// 累加
      &#125;
      .sink(receiveValue: &#123; _ in &#125;)
      .store(in: &amp;subscriptions)
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p><img src="/image/Scan.png"></p>
<h2 id="Lesson-03-過濾用的Operator"><a href="#Lesson-03-過濾用的Operator" class="headerlink" title="Lesson.03 - 過濾用的Operator"></a>Lesson.03 - 過濾用的Operator</h2><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a><a href="https://www.kodeco.com/books/combine-asynchronous-programming-with-swift/v2.0/chapters/4-filtering-operators">filter()</a></h3><ul>
<li>過濾之用，跟<a href="https://www.inote.tw/swift-array-filter">filter()</a>很像</li>
<li><pre><code class="swift">
</code></pre>
</li>
</ul>
<p>example(of: “filter”) {</p>
<pre><code>let multiple = 3
let numbers = (1...10).publisher

numbers
    .filter &#123; $0.isMultiple(of: multiple) &#125;
    .sink(receiveValue: &#123; number in print(&quot;\(number) 是 \(multiple) 的倍數 !!!&quot;)&#125;)
    .store(in: &amp;subscriptions)
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```bash</span><br><span class="line">=== 範例: filter ===</span><br><span class="line">3 是 3 的倍數 !!!</span><br><span class="line">6 是 3 的倍數 !!!</span><br><span class="line">9 是 3 的倍數 !!!</span><br></pre></td></tr></table></figure>

<h3 id="removeDuplicates"><a href="#removeDuplicates" class="headerlink" title="removeDuplicates()"></a><a href="https://paigeshin1991.medium.com/swift-combine-removeduplicates-you-can-totally-misuse-it-if-you-dont-read-this-9bf9c3c36296">removeDuplicates()</a></h3><ul>
<li>取得非重複資料，跟SQL的<a href="https://www.fooish.com/sql/distinct.html">SELECT DISTINCT</a>功能很像</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;removeDuplicates&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> words <span class="operator">=</span> <span class="string">&quot;hey hey there! want to listen to mister mister ?&quot;</span></span><br><span class="line">                  .components(separatedBy: <span class="string">&quot; &quot;</span>)</span><br><span class="line">                  .publisher</span><br><span class="line">  words</span><br><span class="line">    .removeDuplicates()</span><br><span class="line">    .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">    .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hey</span><br><span class="line">there!</span><br><span class="line">want</span><br><span class="line">to</span><br><span class="line">listen</span><br><span class="line">to</span><br><span class="line">mister</span><br><span class="line">?</span><br></pre></td></tr></table></figure>

<h3 id="compactMap"><a href="#compactMap" class="headerlink" title="compactMap()"></a><a href="https://juejin.cn/post/7017623451858894862">compactMap()</a></h3><ul>
<li>把Optional值去除，跟<a href="https://medium.com/jeremy-xue-s-blog/swift-transforming-an-array-e2bcb4f4d67d">compactMap()</a>很像</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;compactMap&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> strings <span class="operator">=</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;1.24&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;45&quot;</span>, <span class="string">&quot;0.23&quot;</span>].publisher</span><br><span class="line">    </span><br><span class="line">    strings</span><br><span class="line">        .compactMap &#123; <span class="type">Float</span>(<span class="variable">$0</span>) &#125;               <span class="comment">/// 過濾Float</span></span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: compactMap ===</span><br><span class="line">1.24</span><br><span class="line">3.0</span><br><span class="line">45.0</span><br><span class="line">0.23</span><br></pre></td></tr></table></figure>

<h3 id="ignoreOutput"><a href="#ignoreOutput" class="headerlink" title="ignoreOutput()"></a><a href="https://www.kodeco.com/books/combine-asynchronous-programming-with-swift/v3.0/chapters/4-filtering-operators">ignoreOutput()</a></h3><ul>
<li>取得的值不重要，只關心<a href="https://zhuanlan.zhihu.com/p/341961251">完成</a>了沒有</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;ignoreOutput&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> numbers <span class="operator">=</span> (<span class="number">1</span><span class="operator">...</span><span class="number">10_000</span>).publisher</span><br><span class="line"></span><br><span class="line">    numbers</span><br><span class="line">        .ignoreOutput()</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;完成: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: ignoreOutput ===</span><br><span class="line">完成: finished</span><br></pre></td></tr></table></figure>

<h3 id="first-where"><a href="#first-where" class="headerlink" title="first(where:)"></a><a href="https://juejin.cn/post/7017623451858894862">first(where:)</a></h3><ul>
<li>取得第一個符合過濾的值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;first(where:)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> multiple <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">let</span> numbers <span class="operator">=</span> (<span class="number">1</span><span class="operator">...</span><span class="number">9</span>).publisher</span><br><span class="line">    </span><br><span class="line">    numbers</span><br><span class="line">        .print(<span class="string">&quot;numbers&quot;</span>)</span><br><span class="line">        .first(where: &#123; <span class="variable">$0</span> <span class="operator">%</span> multiple <span class="operator">==</span> <span class="number">0</span> &#125;)</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;完成: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;第一個偶數: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: first(<span class="built_in">where</span>:) ===</span><br><span class="line">numbers: receive subscription: (1...9)</span><br><span class="line">numbers: request unlimited</span><br><span class="line">numbers: receive value: (1)</span><br><span class="line">numbers: receive value: (2)</span><br><span class="line">numbers: receive cancel</span><br><span class="line">第一個偶數: 2</span><br><span class="line">完成: finished</span><br></pre></td></tr></table></figure>

<h3 id="last-where"><a href="#last-where" class="headerlink" title="last(where:)"></a><a href="https://juejin.cn/post/7017623451858894862">last(where:)</a></h3><ul>
<li>取得最後一個符合過濾的值</li>
<li>取得第一個很簡單，只要有符合就行了；但是最後一個的話，就要finished才可以</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;last(where:)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> numbers <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    numbers</span><br><span class="line">        .last(where: &#123; <span class="variable">$0</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> &#125;)</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;完成: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;最後一個偶數: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    numbers.send(<span class="number">1</span>)</span><br><span class="line">    numbers.send(<span class="number">2</span>)</span><br><span class="line">    numbers.send(<span class="number">3</span>)</span><br><span class="line">    numbers.send(<span class="number">4</span>)</span><br><span class="line">    numbers.send(<span class="number">5</span>)</span><br><span class="line">    numbers.send(completion: .finished)		<span class="comment">/// 要執行這個後才有值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: last(<span class="built_in">where</span>:) ===</span><br><span class="line">最後一個偶數: 4</span><br><span class="line">完成: finished</span><br></pre></td></tr></table></figure>

<h3 id="dropFirst"><a href="#dropFirst" class="headerlink" title="dropFirst()"></a><a href="https://www.kodeco.com/books/combine-asynchronous-programming-with-swift/v3.0/chapters/4-filtering-operators">dropFirst()</a></h3><ul>
<li>忽略掉前面的值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;dropFirst&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> numbers <span class="operator">=</span> (<span class="number">1</span><span class="operator">...</span><span class="number">10</span>).publisher</span><br><span class="line">    </span><br><span class="line">    numbers</span><br><span class="line">        .dropFirst(<span class="number">8</span>)       <span class="comment">/// 忽略掉前8組</span></span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: dropFirst ===</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h3 id="drop-while"><a href="#drop-while" class="headerlink" title="drop(while:)"></a><a href="https://juejin.cn/post/7017853525271150599">drop(while:)</a></h3><ul>
<li>有條件的忽略掉數值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;drop(while:)&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> numbers <span class="operator">=</span> (<span class="number">1</span><span class="operator">...</span><span class="number">10</span>).publisher</span><br><span class="line"></span><br><span class="line">    numbers</span><br><span class="line">        .drop(while: &#123; <span class="built_in">print</span>(<span class="string">&quot;x&quot;</span>); <span class="keyword">return</span> <span class="variable">$0</span> <span class="operator">%</span> <span class="number">5</span> <span class="operator">!=</span> <span class="number">0</span>&#125;)</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: dropFirst ===</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h3 id="drop-while-1"><a href="#drop-while-1" class="headerlink" title="drop(while:)"></a><a href="https://juejin.cn/post/7017853525271150599">drop(while:)</a></h3><ul>
<li>有條件的忽略掉數值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;drop(untilOutputFrom:)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> isReady <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Void</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> taps <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    taps.drop(untilOutputFrom: isReady)         <span class="comment">/// 直到isReady變數發出值之後才動作</span></span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    (<span class="number">1</span><span class="operator">...</span><span class="number">5</span>).forEach &#123; n <span class="keyword">in</span></span><br><span class="line">        taps.send(n)                            <span class="comment">/// 在isReady發出值之前都是沒有用的</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">3</span> &#123; isReady.send() &#125;            <span class="comment">/// isReady發出值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: drop(untilOutputFrom:) ===</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="prefix-while"><a href="#prefix-while" class="headerlink" title="prefix(while:)"></a><a href="https://juejin.cn/post/7017853525271150599">prefix(while:)</a></h3><ul>
<li>跟drop(while:)相反的功能，只取前面幾組，後面的不重要</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;prefix(while:)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> numbers <span class="operator">=</span> (<span class="number">1</span><span class="operator">...</span><span class="number">10</span>).publisher</span><br><span class="line">    </span><br><span class="line">    numbers</span><br><span class="line">        .prefix(while: &#123; <span class="variable">$0</span> <span class="operator">&lt;</span> <span class="number">3</span> &#125;)</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;完成: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: prefix(<span class="keyword">while</span>:) ===</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">完成: finished</span><br></pre></td></tr></table></figure>

<h3 id="prefix-while-1"><a href="#prefix-while-1" class="headerlink" title="prefix(while:)"></a><a href="https://juejin.cn/post/7017853525271150599">prefix(while:)</a></h3><ul>
<li>跟drop(while:)相反的功能，只取前面幾組，後面的不重要</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;prefix(while:)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> numbers <span class="operator">=</span> (<span class="number">1</span><span class="operator">...</span><span class="number">10</span>).publisher</span><br><span class="line">    </span><br><span class="line">    numbers</span><br><span class="line">        .prefix(while: &#123; <span class="variable">$0</span> <span class="operator">&lt;</span> <span class="number">3</span> &#125;)</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;完成: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: prefix(<span class="keyword">while</span>:) ===</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">完成: finished</span><br></pre></td></tr></table></figure>

<h3 id="prefix-untilOutputFrom"><a href="#prefix-untilOutputFrom" class="headerlink" title="prefix(untilOutputFrom:)"></a><a href="https://juejin.cn/post/7017853525271150599">prefix(untilOutputFrom:)</a></h3><ul>
<li>跟drop(untilOutputFrom:)相反的功能，只取前面幾組，後面的不重要</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;prefix(untilOutputFrom:)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> isReady <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Void</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> taps <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    taps</span><br><span class="line">        .prefix(untilOutputFrom: isReady)                   <span class="comment">/// 直到isReady變數發出值之後不停止</span></span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="built_in">print</span>(<span class="string">&quot;完成: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    (<span class="number">1</span><span class="operator">...</span><span class="number">5</span>).forEach &#123; n <span class="keyword">in</span></span><br><span class="line">        taps.send(n)                                        <span class="comment">/// 在isReady發出值之前一直是有效的</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="operator">==</span> <span class="number">2</span> &#123; isReady.send() &#125;                        <span class="comment">/// isReady發出值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: prefix(untilOutputFrom:) ===</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">完成: finished</span><br></pre></td></tr></table></figure>

<h2 id="Lesson-04-結合用的Operator"><a href="#Lesson-04-結合用的Operator" class="headerlink" title="Lesson.04 - 結合用的Operator"></a>Lesson.04 - 結合用的Operator</h2><h3 id="prepend-Output…"><a href="#prepend-Output…" class="headerlink" title="prepend(Output…)"></a><a href="https://juejin.cn/post/7018447582229692452">prepend(Output…)</a></h3><ul>
<li>在原本的publisher之前加入數值，可以應用在一些一定要出現的介紹詞之上…</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;prepend(Output...)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;新會員&quot;</span>, <span class="string">&quot;William&quot;</span>].publisher</span><br><span class="line">    </span><br><span class="line">    publisher</span><br><span class="line">        .prepend(<span class="string">&quot;歡迎來到『人生40才開始』&quot;</span>, <span class="string">&quot;別忘了繳入會費喲&quot;</span>)   <span class="comment">// 再在前面加上 [&quot;歡迎來到『人生40才開始』&quot;, &quot;別忘了繳入會費喲&quot;]</span></span><br><span class="line">        .prepend(<span class="string">&quot;嗨!!!&quot;</span>, <span class="string">&quot;您好&quot;</span>)                            <span class="comment">// 先在前面加上 [&quot;嗨!!!&quot;, &quot;您好&quot;]  =&gt; [&quot;嗨!!!&quot;, &quot;您好&quot;, &quot;歡迎來到『人生40才開始』&quot;, &quot;別忘了繳入會費喲&quot;]</span></span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: prepend(Output...) ===</span><br><span class="line">嗨!!!</span><br><span class="line">您好</span><br><span class="line">歡迎來到『人生40才開始』</span><br><span class="line">別忘了繳入會費喲</span><br><span class="line">新會員</span><br><span class="line">William</span><br></pre></td></tr></table></figure>

<h3 id="prepend-Sequence"><a href="#prepend-Sequence" class="headerlink" title="prepend(Sequence)"></a><a href="">prepend(Sequence)</a></h3><ul>
<li>遵循<a href="https://developer.apple.com/documentation/swift/sequence">Sequence Protocol</a>的都可以使用</li>
<li>也就是有順序關係的，像：<a href="https://developer.apple.com/documentation/swift/array">Array</a> &#x2F; <a href="https://developer.apple.com/documentation/swift/set">Set</a> &#x2F; <a href="https://developer.apple.com/documentation/swift/stride(from:to:by:&#41;">Stride</a></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;prepend(Sequence)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>].publisher</span><br><span class="line">    <span class="keyword">let</span> array <span class="operator">=</span> [<span class="number">3</span>, <span class="number">4</span>]                              <span class="comment">// Array也可以</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">set</span> <span class="operator">=</span> <span class="type">Set</span>(<span class="number">1</span><span class="operator">...</span><span class="number">2</span>)                            <span class="comment">// Set也可以</span></span><br><span class="line">    <span class="keyword">let</span> stride <span class="operator">=</span> <span class="built_in">stride</span>(from: <span class="number">6</span>, to: <span class="number">11</span>, by: <span class="number">2</span>)     <span class="comment">// Stride也可以</span></span><br><span class="line">    </span><br><span class="line">    publisher</span><br><span class="line">        .prepend(array)</span><br><span class="line">        .prepend(<span class="keyword">set</span>)</span><br><span class="line">        .prepend(stride)</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: prepend(Sequence) ===</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure>

<h3 id="prepend-Publisher"><a href="#prepend-Publisher" class="headerlink" title="prepend(Publisher)"></a><a href="https://developer.apple.com/documentation/combine/publisher/prepend(_:%#41;-v9sb">prepend(Publisher)</a></h3><ul>
<li>publisher當參數也可以</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;prepend(Publisher)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher1 <span class="operator">=</span> [<span class="number">3</span>, <span class="number">4</span>].publisher</span><br><span class="line">    <span class="keyword">let</span> publisher2 <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>].publisher</span><br><span class="line">    </span><br><span class="line">    publisher1</span><br><span class="line">        .prepend(publisher2)</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: prepend(Publisher) ===</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<ul>
<li>這樣也行</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;prepend(Publisher) #2&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher1 <span class="operator">=</span> [<span class="number">3</span>, <span class="number">4</span>].publisher</span><br><span class="line">    <span class="keyword">let</span> publisher2 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    publisher1</span><br><span class="line">        .prepend(publisher2)</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    publisher2.send(<span class="number">1</span>)</span><br><span class="line">    publisher2.send(<span class="number">2</span>)</span><br><span class="line">    publisher2.send(completion: .finished)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: prepend(Publisher) <span class="comment">#2 ===</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="append-Output…"><a href="#append-Output…" class="headerlink" title="append(Output…)"></a><a href="https://juejin.cn/post/7018447582229692452">append(Output…)</a></h3><ul>
<li>append正好跟prepend相反，它是加在後面的功能…</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;append(Output...)&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;您好&quot;</span>, <span class="string">&quot;我是William&quot;</span>].publisher</span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .append(<span class="string">&quot;-演出人員名單-&quot;</span>, <span class="string">&quot;-配樂清單-&quot;</span>)</span><br><span class="line">        .append(<span class="string">&quot;~終~&quot;</span>)</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: append(Output...) ===</span><br><span class="line">您好</span><br><span class="line">我是William</span><br><span class="line">-演出人員名單-</span><br><span class="line">-配樂清單-</span><br><span class="line">~終~</span><br></pre></td></tr></table></figure>

<ul>
<li>這樣也可以</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;append(Output...) #2&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    publisher</span><br><span class="line">        .append(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">        .append(<span class="number">5</span>)</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    publisher.send(<span class="number">1</span>)</span><br><span class="line">    publisher.send(<span class="number">2</span>)</span><br><span class="line">    publisher.send(completion: .finished)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: append(Output...) <span class="comment">#2 ===</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="append-Sequence"><a href="#append-Sequence" class="headerlink" title="append(Sequence)"></a><a href="https://juejin.cn/post/7018447582229692452">append(Sequence)</a></h3><ul>
<li>跟append(Sequence)相反，就不多做介紹了</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;append(Sequence)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].publisher</span><br><span class="line">    </span><br><span class="line">    publisher</span><br><span class="line">        .append([<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">        .append(<span class="type">Set</span>([<span class="number">6</span>, <span class="number">7</span>]))</span><br><span class="line">        .append(<span class="built_in">stride</span>(from: <span class="number">8</span>, to: <span class="number">11</span>, by: <span class="number">2</span>))</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: append(Sequence) ===</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h3 id="append-Publisher"><a href="#append-Publisher" class="headerlink" title="append(Publisher)"></a><a href="https://juejin.cn/post/7018447582229692452">append(Publisher)</a></h3><ul>
<li>跟append(Publisher)相反，也不多做介紹了</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;append(Publisher)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher1 <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>].publisher</span><br><span class="line">    <span class="keyword">let</span> publisher2 <span class="operator">=</span> [<span class="number">3</span>, <span class="number">4</span>].publisher</span><br><span class="line">    </span><br><span class="line">    publisher1</span><br><span class="line">        .append(publisher2)</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: append(Publisher) ===</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h3 id="switchToLatest"><a href="#switchToLatest" class="headerlink" title="switchToLatest"></a><a href="https://zhuanlan.zhihu.com/p/345054834">switchToLatest</a></h3><ul>
<li>切換到最後一個Publisher</li>
<li>在應用上的話，就像及時搜尋單字框，會一直送request，但是我們只需要最後一次的單字就好，中間的不要動作，減少多餘的request發送</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;switchToLatest&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher1 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> publisher2 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> publisher3 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> publishers <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    publishers</span><br><span class="line">        .switchToLatest()</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;Completed!&quot;</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    publishers.send(publisher1)</span><br><span class="line">    publisher1.send(<span class="number">1</span>)</span><br><span class="line">    publisher1.send(<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    publishers.send(publisher2)</span><br><span class="line">    publisher1.send(<span class="number">3</span>)</span><br><span class="line">    publisher2.send(<span class="number">4</span>)</span><br><span class="line">    publisher2.send(<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    publishers.send(publisher3)</span><br><span class="line">    publisher2.send(<span class="number">6</span>)</span><br><span class="line">    publisher3.send(<span class="number">7</span>)</span><br><span class="line">    publisher3.send(<span class="number">8</span>)</span><br><span class="line">    publisher3.send(<span class="number">9</span>)</span><br><span class="line">    </span><br><span class="line">    publisher3.send(completion: .finished)</span><br><span class="line">    publishers.send(completion: .finished)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: switchToLatest ===</span><br><span class="line">publisher1 - 1</span><br><span class="line">publisher1 - 2</span><br><span class="line">publisher2 - 4</span><br><span class="line">publisher2 - 5</span><br><span class="line">publisher3 - 7</span><br><span class="line">publisher3 - 8</span><br><span class="line">publisher3 - 9</span><br><span class="line">Completed!</span><br></pre></td></tr></table></figure>

<ul>
<li>實際應用<br><img src="/../../source/images/Study_Combine/SwitchToLatest.png"></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;switchToLatest - Network Request&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://picsum.photos/128&quot;</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> taps <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Void</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    taps.map &#123; <span class="keyword">_</span> <span class="keyword">in</span> getImage() &#125;</span><br><span class="line">        .switchToLatest()</span><br><span class="line">        .sink(receiveValue: &#123; <span class="keyword">_</span> <span class="keyword">in</span> &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    taps.send()                                                                            <span class="comment">// 下載圖片動作</span></span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">3.0</span>) &#123; <span class="built_in">print</span>(<span class="type">Date</span>()); taps.send() &#125;</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">3.1</span>) &#123; <span class="built_in">print</span>(<span class="type">Date</span>()); taps.send() &#125;</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">3.2</span>) &#123; <span class="built_in">print</span>(<span class="type">Date</span>()); taps.send() &#125;</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">3.3</span>) &#123; <span class="built_in">print</span>(<span class="type">Date</span>()); taps.send() &#125;</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">3.4</span>) &#123; <span class="built_in">print</span>(<span class="type">Date</span>()); taps.send() &#125;   <span class="comment">// 只會留這一個下載圖片動作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getImage</span>() -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">UIImage</span>?, <span class="type">Never</span>&gt; &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">URLSession</span>.shared</span><br><span class="line">            .dataTaskPublisher(for: url)</span><br><span class="line">            .map &#123; data, <span class="keyword">_</span> <span class="keyword">in</span> <span class="type">UIImage</span>(data: data) &#125;</span><br><span class="line">            .print(<span class="string">&quot;[image]&quot;</span>)</span><br><span class="line">            .replaceError(with: <span class="literal">nil</span>)</span><br><span class="line">            .eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: switchToLatest - Network Request ===</span><br><span class="line">[image]: receive subscription: (DataTaskPublisher)</span><br><span class="line">[image]: request unlimited</span><br><span class="line">[image]: receive value: (Optional(&lt;UIImage:0x600001eec480 anonymous &#123;128, 128&#125; renderingMode=automatic(original)&gt;))</span><br><span class="line">[image]: receive finished</span><br><span class="line">2023-05-30 07:02:02 +0000</span><br><span class="line">[image]: receive subscription: (DataTaskPublisher)</span><br><span class="line">[image]: request unlimited</span><br><span class="line">2023-05-30 07:02:02 +0000</span><br><span class="line">[image]: receive cancel</span><br><span class="line">[image]: receive subscription: (DataTaskPublisher)</span><br><span class="line">[image]: request unlimited</span><br><span class="line">2023-05-30 07:02:02 +0000</span><br><span class="line">[image]: receive cancel</span><br><span class="line">[image]: receive subscription: (DataTaskPublisher)</span><br><span class="line">[image]: request unlimited</span><br><span class="line">2023-05-30 07:02:02 +0000</span><br><span class="line">[image]: receive cancel</span><br><span class="line">[image]: receive subscription: (DataTaskPublisher)</span><br><span class="line">[image]: request unlimited</span><br><span class="line">2023-05-30 07:02:02 +0000</span><br><span class="line">[image]: receive cancel</span><br><span class="line">[image]: receive subscription: (DataTaskPublisher)</span><br><span class="line">[image]: request unlimited</span><br><span class="line">[image]: receive value: (Optional(&lt;UIImage:0x600001eec5a0 anonymous &#123;128, 128&#125; renderingMode=automatic(original)&gt;))</span><br><span class="line">[image]: receive finished</span><br></pre></td></tr></table></figure>

<h3 id="merge-with"><a href="#merge-with" class="headerlink" title="merge(with:)"></a><a href="https://ithelp.ithome.com.tw/articles/10221533">merge(with:)</a></h3><ul>
<li>把Publisher們合併在一起</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;merge(with:)&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher1 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> publisher2 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    publisher1</span><br><span class="line">        .merge(with: publisher2)</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;Completed&quot;</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    publisher1.send(<span class="number">1</span>)</span><br><span class="line">    publisher1.send(<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    publisher2.send(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    publisher1.send(<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line">    publisher2.send(<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    publisher1.send(completion: .finished)</span><br><span class="line">    publisher2.send(completion: .finished)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: merge(with:) ===</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">Completed</span><br></pre></td></tr></table></figure>

<h3 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest()"></a><a href="https://ithelp.ithome.com.tw/articles/10221533">combineLatest()</a></h3><ul>
<li>合併最後的一個publisher</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;combineLatest&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher1 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> publisher2 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    publisher1</span><br><span class="line">        .combineLatest(publisher2)</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;Completed&quot;</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;(<span class="subst">\(<span class="variable">$0</span>)</span>, <span class="subst">\(<span class="variable">$1</span>)</span>)&quot;</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    publisher1.send(<span class="number">1</span>)</span><br><span class="line">    publisher2.send(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    publisher1.send(<span class="number">2</span>)</span><br><span class="line">    publisher2.send(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    publisher1.send(<span class="number">3</span>)</span><br><span class="line">    publisher2.send(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    publisher1.send(completion: .finished)</span><br><span class="line">    publisher2.send(completion: .finished)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: combineLatest ===</span><br><span class="line">(1, a)</span><br><span class="line">(2, a)</span><br><span class="line">(2, b)</span><br><span class="line">(3, b)</span><br><span class="line">(3, c)</span><br><span class="line">Completed</span><br></pre></td></tr></table></figure>

<h3 id="zip"><a href="#zip" class="headerlink" title="zip()"></a><a href="https://augmentedcode.io/2022/10/03/combine-publishers-merge-zip-and-combinelatest-on-ios/">zip()</a></h3><ul>
<li>這個跟combineLatest不太一樣，它是一對一合併</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;zip&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher1 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    <span class="keyword">let</span> publisher2 <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    publisher1</span><br><span class="line">        .zip(publisher2)</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="keyword">_</span> <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;Completed&quot;</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;(<span class="subst">\(<span class="variable">$0</span>)</span> ,<span class="subst">\(<span class="variable">$1</span>)</span>)&quot;</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    publisher1.send(<span class="number">1</span>)</span><br><span class="line">    publisher1.send(<span class="number">2</span>)</span><br><span class="line">    publisher2.send(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    publisher2.send(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    publisher1.send(<span class="number">3</span>)</span><br><span class="line">    publisher2.send(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">    publisher2.send(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">    publisher1.send(<span class="number">4</span>)</span><br><span class="line">    publisher2.send(<span class="string">&quot;e&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    publisher1.send(completion: .finished)</span><br><span class="line">    publisher2.send(completion: .finished)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: zip ===</span><br><span class="line">(1 ,a)</span><br><span class="line">(2 ,b)</span><br><span class="line">(3 ,c)</span><br><span class="line">(4 ,d)</span><br><span class="line">Completed</span><br></pre></td></tr></table></figure>

<h2 id="Lesson-05-時間操作運算子"><a href="#Lesson-05-時間操作運算子" class="headerlink" title="Lesson.05 - 時間操作運算子"></a>Lesson.05 - 時間操作運算子</h2><h3 id="delay-for-tolerance-scheduler-options"><a href="#delay-for-tolerance-scheduler-options" class="headerlink" title="delay(for:tolerance:scheduler:options)"></a><a href="https://juejin.cn/post/7020305767324450823">delay(for:tolerance:scheduler:options)</a></h3><ul>
<li>可以延遲來自發佈者的值，以便您看到它們比它們實際發生的時間晚…</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> delaySeccond <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> timerSeccond <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subscriptions <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timerPublisher <span class="operator">=</span> <span class="type">Timer</span></span><br><span class="line">  .publish(every: <span class="type">Double</span>(timerSeccond) , on: .main, in: .common)</span><br><span class="line">  .autoconnect()</span><br><span class="line"></span><br><span class="line">timerPublisher</span><br><span class="line">    .handleEvents(receiveOutput: &#123; date <span class="keyword">in</span> print (<span class="string">&quot;每<span class="subst">\(timerSeccond)</span>秒發送訊息<span class="subst">\t</span><span class="subst">\t</span><span class="subst">\(date)</span>&quot;</span>) &#125;)</span><br><span class="line">    .delay(for: .seconds(delaySeccond), scheduler: <span class="type">DispatchQueue</span>.main)</span><br><span class="line">    .sink &#123; value <span class="keyword">in</span> <span class="built_in">print</span>(<span class="string">&quot;收到前<span class="subst">\(delaySeccond)</span>秒的訊息<span class="subst">\t</span><span class="subst">\(value)</span>&quot;</span>) &#125;</span><br><span class="line">    .store(in: <span class="operator">&amp;</span>subscriptions)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">每1秒發送訊息		2023-06-14 05:35:30 +0000</span><br><span class="line">每1秒發送訊息		2023-06-14 05:35:31 +0000</span><br><span class="line">每1秒發送訊息		2023-06-14 05:35:32 +0000</span><br><span class="line">收到前2秒的訊息	2023-06-14 05:35:30 +0000</span><br><span class="line">每1秒發送訊息		2023-06-14 05:35:33 +0000</span><br><span class="line">收到前2秒的訊息	2023-06-14 05:35:31 +0000</span><br><span class="line">每1秒發送訊息		2023-06-14 05:35:34 +0000</span><br><span class="line">收到前2秒的訊息	2023-06-14 05:35:32 +0000</span><br></pre></td></tr></table></figure>

<ul>
<li>圖文版加強版<br><img src="/../../source/images/Study_Combine/Delay.png"></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> valuesPerSecond <span class="operator">=</span> <span class="number">1.0</span></span><br><span class="line"><span class="keyword">let</span> delayInSeconds <span class="operator">=</span> <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sourcePublisher <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Date</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> delayedPublisher <span class="operator">=</span> sourcePublisher.delay(for: .seconds(delayInSeconds), scheduler: <span class="type">DispatchQueue</span>.main)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> <span class="type">Timer</span></span><br><span class="line">    .publish(every: <span class="number">1.0</span> <span class="operator">/</span> valuesPerSecond, on: .main, in: .common)</span><br><span class="line">    .autoconnect()</span><br><span class="line">    .subscribe(sourcePublisher)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sourceTimeline <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;發射數值 - <span class="subst">\(valuesPerSecond)</span> 個/秒&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> delayedTimeline <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;發射數值 - 延遲<span class="subst">\(delayInSeconds)</span>秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view <span class="operator">=</span> <span class="type">VStack</span>(spacing: <span class="number">50</span>) &#123;</span><br><span class="line">    sourceTimeline</span><br><span class="line">    delayedTimeline</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourcePublisher.displayEvents(in: sourceTimeline)</span><br><span class="line">delayedPublisher.displayEvents(in: delayedTimeline)</span><br><span class="line"></span><br><span class="line"><span class="type">PlaygroundPage</span>.current.liveView <span class="operator">=</span> <span class="type">UIHostingController</span>(rootView: view.frame(width: <span class="number">800</span>, height: <span class="number">600</span>))</span><br></pre></td></tr></table></figure>

<h3 id="collect-1"><a href="#collect-1" class="headerlink" title="collect()"></a><a href="https://jllnmercier.medium.com/combine-collect-operator-cf818f119806">collect()</a></h3><ul>
<li>定時收集數值…</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> subscriber <span class="operator">=</span> <span class="type">Timer</span>.publish(every: <span class="number">0.5</span>, on: .main, in: .default) <span class="comment">// 每0.5秒發一次</span></span><br><span class="line">    .autoconnect()</span><br><span class="line">    .collect(.byTime(<span class="type">RunLoop</span>.main, .seconds(<span class="number">3</span>)))                    <span class="comment">// 收集3秒內的數值 =&gt; 3 / 0.5 = 6個數值</span></span><br><span class="line">    .sink &#123; <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>, terminator: <span class="string">&quot;<span class="subst">\n</span><span class="subst">\n</span>&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2023-06-14 05:44:25 +0000, 2023-06-14 05:44:25 +0000, 2023-06-14 05:44:26 +0000, 2023-06-14 05:44:26 +0000, 2023-06-14 05:44:27 +0000]</span><br><span class="line"></span><br><span class="line">[2023-06-14 05:44:27 +0000, 2023-06-14 05:44:28 +0000, 2023-06-14 05:44:28 +0000, 2023-06-14 05:44:29 +0000, 2023-06-14 05:44:29 +0000, 2023-06-14 05:44:30 +0000]</span><br><span class="line"></span><br><span class="line">[2023-06-14 05:44:30 +0000, 2023-06-14 05:44:31 +0000, 2023-06-14 05:44:31 +0000, 2023-06-14 05:44:32 +0000, 2023-06-14 05:44:32 +0000, 2023-06-14 05:44:33 +0000]</span><br></pre></td></tr></table></figure>

<ul>
<li>圖文版加強版<br><img src="/../../source/images/Study_Combine/Collect.png"></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> valuesPerSecond <span class="operator">=</span> <span class="number">1.0</span></span><br><span class="line"><span class="keyword">let</span> collectTimeStride <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">let</span> collectMaxCount <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sourcePublisher <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Date</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> collectedPublisher <span class="operator">=</span> sourcePublisher</span><br><span class="line">  .collect(.byTime(<span class="type">DispatchQueue</span>.main, .seconds(collectTimeStride)))</span><br><span class="line">  .flatMap &#123; dates <span class="keyword">in</span> dates.publisher &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> collectedPublisher2 <span class="operator">=</span> sourcePublisher</span><br><span class="line">  .collect(.byTimeOrCount(<span class="type">DispatchQueue</span>.main, .seconds(collectTimeStride), collectMaxCount))</span><br><span class="line">  .flatMap &#123; dates <span class="keyword">in</span> dates.publisher &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription <span class="operator">=</span> <span class="type">Timer</span></span><br><span class="line">  .publish(every: <span class="number">1.0</span> <span class="operator">/</span> valuesPerSecond, on: .main, in: .common)</span><br><span class="line">  .autoconnect()</span><br><span class="line">  .subscribe(sourcePublisher)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sourceTimeline <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;Emitted values:&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> collectedTimeline <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;Collected values (every <span class="subst">\(collectTimeStride)</span>s):&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> collectedTimeline2 <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;Collected values (at most <span class="subst">\(collectMaxCount)</span> every <span class="subst">\(collectTimeStride)</span>s):&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view <span class="operator">=</span> <span class="type">VStack</span>(spacing: <span class="number">40</span>) &#123;</span><br><span class="line">  sourceTimeline</span><br><span class="line">  collectedTimeline</span><br><span class="line">  collectedTimeline2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">PlaygroundPage</span>.current.liveView <span class="operator">=</span> <span class="type">UIHostingController</span>(rootView: view.frame(width: <span class="number">600</span>, height: <span class="number">600</span>))</span><br><span class="line"></span><br><span class="line">sourcePublisher.displayEvents(in: sourceTimeline)</span><br><span class="line">collectedPublisher.displayEvents(in: collectedTimeline)</span><br><span class="line">collectedPublisher2.displayEvents(in: collectedTimeline2)</span><br></pre></td></tr></table></figure>

<h3 id="debounce"><a href="#debounce" class="headerlink" title="debounce()"></a><a href="https://ithelp.ithome.com.tw/articles/10222968">debounce()</a></h3><ul>
<li>取時間內的最後一個數值</li>
<li>比如在短時間內Button連點的問題，只處理最後一次點選事件</li>
<li>也就是除了Delay，還會過濾</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bounces:[(<span class="type">Int</span>, <span class="type">TimeInterval</span>)] <span class="operator">=</span> [</span><br><span class="line">    (<span class="number">1</span>, <span class="number">0.1</span>),   <span class="comment">// 0.1秒 =&gt; 1</span></span><br><span class="line">    (<span class="number">2</span>, <span class="number">0.2</span>),   <span class="comment">// 0.2秒 =&gt; 2</span></span><br><span class="line">    (<span class="number">5</span>, <span class="number">1.1</span>),   <span class="comment">// 1.1秒 =&gt; 5</span></span><br><span class="line">    (<span class="number">6</span>, <span class="number">1.2</span>)    <span class="comment">// 1.2秒 =&gt; 6</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cancellable <span class="operator">=</span> subject</span><br><span class="line">    .debounce(for: .seconds(<span class="number">0.5</span>), scheduler: <span class="type">RunLoop</span>.main)</span><br><span class="line">    .sink &#123; index <span class="keyword">in</span> print (<span class="string">&quot;Received index <span class="subst">\(index)</span>&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> bounce <span class="keyword">in</span> bounces &#123;</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> bounce.<span class="number">1</span>) &#123;</span><br><span class="line">        subject.send(bounce.<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>圖文版加強版<br><img src="/../../source/images/Study_Combine/Debounce.png"></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> debounced <span class="operator">=</span> subject</span><br><span class="line">  .debounce(for: .seconds(<span class="number">1.0</span>), scheduler: <span class="type">DispatchQueue</span>.main)</span><br><span class="line">  .share()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subjectTimeline <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;Emitted values&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> debouncedTimeline <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;Debounced values&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view <span class="operator">=</span> <span class="type">VStack</span>(spacing: <span class="number">100</span>) &#123;</span><br><span class="line">  subjectTimeline</span><br><span class="line">  debouncedTimeline</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subject.displayEvents(in: subjectTimeline)</span><br><span class="line">debounced.displayEvents(in: debouncedTimeline)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription1 <span class="operator">=</span> subject</span><br><span class="line">  .sink &#123; string <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;+<span class="subst">\(deltaTime)</span>s: Subject emitted: <span class="subst">\(string)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription2 <span class="operator">=</span> debounced</span><br><span class="line">  .sink &#123; string <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;+<span class="subst">\(deltaTime)</span>s: Debounced emitted: <span class="subst">\(string)</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">subject.feed(with: typingHelloWorld)</span><br><span class="line"></span><br><span class="line"><span class="type">PlaygroundPage</span>.current.liveView <span class="operator">=</span> <span class="type">UIHostingController</span>(rootView: view.frame(width: <span class="number">600</span>, height: <span class="number">600</span>))</span><br></pre></td></tr></table></figure>

<h3 id="throttle-for-scheduler-latest"><a href="#throttle-for-scheduler-latest" class="headerlink" title="throttle(for:scheduler:latest:)"></a><a href="https://zhuanlan.zhihu.com/p/343631974">throttle(for:scheduler:latest:)</a></h3><ul>
<li>限制數量用</li>
<li>如果在2秒內瘋狂點選按鈕，時間窗口的時長為0.5秒，那麼throttle可以傳送4次資料</li>
<li>而debounce不會傳送資料，只有當我停止點選0.5秒後，才會傳送一次資料。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cancellable <span class="operator">=</span> <span class="type">Timer</span>.publish(every: <span class="number">3.0</span>, on: .main, in: .default)    <span class="comment">// 每3秒發送一次</span></span><br><span class="line">    .autoconnect()</span><br><span class="line">    .print(<span class="string">&quot;<span class="subst">\(Date().description)</span>&quot;</span>)</span><br><span class="line">    .throttle(for: <span class="number">10.0</span>, scheduler: <span class="type">RunLoop</span>.main, latest: <span class="literal">true</span>)         <span class="comment">// 每10秒內取最後一個</span></span><br><span class="line">    .sink(</span><br><span class="line">        receiveCompletion: &#123; print (<span class="string">&quot;Completion: <span class="subst">\(<span class="variable">$0</span>)</span>.&quot;</span>) &#125;,</span><br><span class="line">        receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;Received Timestamp <span class="subst">\(<span class="variable">$0</span>)</span>.&quot;</span>) &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2023-06-14 06:42:34 +0000: request unlimited</span><br><span class="line">2023-06-14 06:42:34 +0000: receive value: (2023-06-14 06:42:37 +0000)</span><br><span class="line">Received Timestamp 2023-06-14 06:42:37 +0000.</span><br><span class="line">2023-06-14 06:42:34 +0000: receive value: (2023-06-14 06:42:40 +0000)</span><br><span class="line">2023-06-14 06:42:34 +0000: receive value: (2023-06-14 06:42:43 +0000)</span><br><span class="line">2023-06-14 06:42:34 +0000: receive value: (2023-06-14 06:42:46 +0000)</span><br><span class="line">Received Timestamp 2023-06-14 06:42:46 +0000.</span><br><span class="line">2023-06-14 06:42:34 +0000: receive value: (2023-06-14 06:42:49 +0000)</span><br><span class="line">2023-06-14 06:42:34 +0000: receive value: (2023-06-14 06:42:52 +0000)</span><br><span class="line">2023-06-14 06:42:34 +0000: receive value: (2023-06-14 06:42:55 +0000)</span><br><span class="line">Received Timestamp 2023-06-14 06:42:55 +0000.</span><br><span class="line">2023-06-14 06:42:34 +0000: receive value: (2023-06-14 06:42:58 +0000)</span><br><span class="line">2023-06-14 06:42:34 +0000: receive value: (2023-06-14 06:43:01 +0000)</span><br><span class="line">2023-06-14 06:42:34 +0000: receive value: (2023-06-14 06:43:04 +0000)</span><br><span class="line">2023-06-14 06:42:34 +0000: receive value: (2023-06-14 06:43:07 +0000)</span><br><span class="line">Received Timestamp 2023-06-14 06:43:07 +0000.</span><br></pre></td></tr></table></figure>

<ul>
<li>圖文版加強版<br><img src="/../../source/images/Study_Combine/Throttle.png"></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> throttleDelay <span class="operator">=</span> <span class="number">1.0</span></span><br><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> throttled <span class="operator">=</span> subject</span><br><span class="line">    .throttle(for: .seconds(throttleDelay), scheduler: <span class="type">DispatchQueue</span>.main, latest: <span class="literal">true</span>)</span><br><span class="line">    .share()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subjectTimeline <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;Emitted values&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> throttledTimeline <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;Throttled values&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view <span class="operator">=</span> <span class="type">VStack</span>(spacing: <span class="number">100</span>) &#123;</span><br><span class="line">    subjectTimeline</span><br><span class="line">    throttledTimeline</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subject.displayEvents(in: subjectTimeline)</span><br><span class="line">throttled.displayEvents(in: throttledTimeline)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription1 <span class="operator">=</span> subject</span><br><span class="line">    .sink &#123; string <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;+<span class="subst">\(deltaTime)</span>s: Subject emitted: <span class="subst">\(string)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription2 <span class="operator">=</span> throttled</span><br><span class="line">    .sink &#123; string <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;+<span class="subst">\(deltaTime)</span>s: Throttled emitted: <span class="subst">\(string)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">subject.feed(with: typingHelloWorld)</span><br><span class="line"></span><br><span class="line"><span class="type">PlaygroundPage</span>.current.liveView <span class="operator">=</span> <span class="type">UIHostingController</span>(rootView: view.frame(width: <span class="number">400</span>, height: <span class="number">600</span>))</span><br></pre></td></tr></table></figure>

<h3 id="timeout-scheduler-options-customError"><a href="#timeout-scheduler-options-customError" class="headerlink" title="timeout(_:scheduler:options:customError:)"></a><a href="https://derrickho328.medium.com/combine-timeout-a5e89b434c72">timeout(_:scheduler:options:customError:)</a></h3><ul>
<li>用於設定pipline的超時時間</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="type">WaitTime</span> : <span class="type">Int</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> <span class="type">TimeoutTime</span> : <span class="type">Int</span> <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"><span class="keyword">let</span> cancellable <span class="operator">=</span> subject</span><br><span class="line">    .timeout(.seconds(<span class="type">TimeoutTime</span>), scheduler: <span class="type">DispatchQueue</span>.main, options: <span class="literal">nil</span>, customError:<span class="literal">nil</span>)</span><br><span class="line">    .sink(</span><br><span class="line">        receiveCompletion: &#123; print (<span class="string">&quot;<span class="subst">\(Date())</span> - <span class="subst">\(TimeoutTime)</span>秒後完成: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;,</span><br><span class="line">        receiveValue: &#123; print (<span class="string">&quot;<span class="subst">\(Date())</span> - 數值: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(Date())</span> - 開始&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> .seconds(<span class="type">WaitTime</span>), execute: &#123; subject.send(<span class="string">&quot;<span class="subst">\(Date())</span> - 等<span class="subst">\(WaitTime)</span>秒後發出&quot;</span>) &#125; )</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2023-06-14 06:55:46 +0000 - 開始</span><br><span class="line">2023-06-14 06:55:49 +0000 - 數值: 2023-06-14 06:55:49 +0000 - 等2秒後發出</span><br><span class="line">2023-06-14 06:55:54 +0000 - 完成: finished</span><br></pre></td></tr></table></figure>

<ul>
<li>圖文版加強版<br><img src="/../../source/images/Study_Combine/Timeout.png"></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TimeoutError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> timedOut</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Void</span>, <span class="type">TimeoutError</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timedOutSubject <span class="operator">=</span> subject.timeout(.seconds(<span class="number">5</span>), scheduler: <span class="type">DispatchQueue</span>.main, customError: &#123; .timedOut &#125;)</span><br><span class="line"><span class="keyword">let</span> timeline <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;Button taps&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view <span class="operator">=</span> <span class="type">VStack</span>(spacing: <span class="number">100</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Button</span>(action: &#123; subject.send() &#125;) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Press me within 5 seconds&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    timeline</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timedOutSubject.displayEvents(in: timeline)</span><br><span class="line"></span><br><span class="line"><span class="type">PlaygroundPage</span>.current.liveView <span class="operator">=</span> <span class="type">UIHostingController</span>(rootView: view.frame(width: <span class="number">600</span>, height: <span class="number">600</span>))</span><br></pre></td></tr></table></figure>

<h3 id="measureInterval-using-options"><a href="#measureInterval-using-options" class="headerlink" title="measureInterval(using:options:)"></a><a href="https://medium.com/swlh/operators-b8405cb9e265">measureInterval(using:options:)</a></h3><ul>
<li>測量並行出從上游發佈者接收到的事件之間的時間間隔…</li>
<li>可以看出時間間隔大約就是一秒</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cancellable <span class="operator">=</span> <span class="type">Timer</span>.publish(every: <span class="number">1</span>, on: .main, in: .default)</span><br><span class="line">    .autoconnect()</span><br><span class="line">    .measureInterval(using: <span class="type">RunLoop</span>.main)</span><br><span class="line">    .sink &#123; <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>, terminator: <span class="string">&quot;<span class="subst">\n</span>&quot;</span>) &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Stride(magnitude: 1.0004009008407593)</span><br><span class="line">Stride(magnitude: 1.0000990629196167)</span><br><span class="line">Stride(magnitude: 1.0000349283218384)</span><br><span class="line">Stride(magnitude: 1.0007370710372925)</span><br><span class="line">Stride(magnitude: 1.0000169277191162)</span><br><span class="line">Stride(magnitude: 0.9993090629577637)</span><br><span class="line">Stride(magnitude: 0.9999560117721558)</span><br><span class="line">Stride(magnitude: 1.0000669956207275)</span><br><span class="line">Stride(magnitude: 0.9999699592590332)</span><br></pre></td></tr></table></figure>

<ul>
<li>圖文版加強版<br><img src="/../../source/images/Study_Combine/MeasureInterval.png"></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> subject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> measureSubject <span class="operator">=</span> subject.measureInterval(using: <span class="type">DispatchQueue</span>.main)</span><br><span class="line"><span class="keyword">let</span> measureSubject2 <span class="operator">=</span> subject.measureInterval(using: <span class="type">RunLoop</span>.main)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subjectTimeline <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;Emitted values&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> measureTimeline <span class="operator">=</span> <span class="type">TimelineView</span>(title: <span class="string">&quot;Measured values&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view <span class="operator">=</span> <span class="type">VStack</span>(spacing: <span class="number">100</span>) &#123;</span><br><span class="line">    subjectTimeline</span><br><span class="line">    measureTimeline</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subject.displayEvents(in: subjectTimeline)</span><br><span class="line">measureSubject.displayEvents(in: measureTimeline)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription1 <span class="operator">=</span> subject.sink &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;+<span class="subst">\(deltaTime)</span>s: Subject emitted: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription2 <span class="operator">=</span> measureSubject.sink &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;+<span class="subst">\(deltaTime)</span>s: Measure emitted: <span class="subst">\(Double(<span class="variable">$0</span>.magnitude) <span class="operator">/</span> <span class="number">1_000_000_000.0</span>)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription3 <span class="operator">=</span> measureSubject2.sink &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;+<span class="subst">\(deltaTime)</span>s: Measure2 emitted: <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subject.feed(with: typingHelloWorld)</span><br><span class="line"></span><br><span class="line"><span class="type">PlaygroundPage</span>.current.liveView <span class="operator">=</span> <span class="type">UIHostingController</span>(rootView: view.frame(width: <span class="number">375</span>, height: <span class="number">600</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Lesson-06-序列用運算子"><a href="#Lesson-06-序列用運算子" class="headerlink" title="Lesson.06 - 序列用運算子"></a>Lesson.06 - 序列用運算子</h2><h3 id="最小值-min-最大值-max"><a href="#最小值-min-最大值-max" class="headerlink" title="最小值 - min() &#x2F; 最大值 - max()"></a><a href="https://juejin.cn/post/7020306845646454820">最小值 - min() &#x2F; 最大值 - max()</a></h3><ul>
<li>取最小值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;min()&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="number">1</span>, <span class="operator">-</span><span class="number">50</span>, <span class="number">246</span>, <span class="number">0</span>].publisher</span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .min()</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;最小值：<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: min() ===</span><br><span class="line">publisher: receive subscription: ([1, -50, 246, 0])</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (1)</span><br><span class="line">publisher: receive value: (-50)</span><br><span class="line">publisher: receive value: (246)</span><br><span class="line">publisher: receive value: (0)</span><br><span class="line">publisher: receive finished</span><br><span class="line">最小值：-50</span><br></pre></td></tr></table></figure>

<ul>
<li>取最小值 (自訂過濾條件)</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;min non-Comparable&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;12345&quot;</span>, <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;hello world&quot;</span>]</span><br><span class="line">        .map &#123; <span class="type">Data</span>(<span class="variable">$0</span>.utf8) &#125;</span><br><span class="line">        .publisher</span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .min &#123; <span class="variable">$0</span>.count <span class="operator">&lt;</span> <span class="variable">$1</span>.count &#125;</span><br><span class="line">        .sink &#123; data <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> string <span class="operator">=</span> <span class="type">String</span>(data: data, encoding: .utf8) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;最小資料的是 <span class="subst">\(string)</span>, <span class="subst">\(string.count)</span> bytes&quot;</span>)</span><br><span class="line">        &#125;.store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: min non-Comparable ===</span><br><span class="line">publisher: receive subscription: ([5 bytes, 2 bytes, 11 bytes])</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (5 bytes)</span><br><span class="line">publisher: receive value: (2 bytes)</span><br><span class="line">publisher: receive value: (11 bytes)</span><br><span class="line">publisher: receive finished</span><br><span class="line">最小資料的是 ab, 2 bytes</span><br></pre></td></tr></table></figure>

<ul>
<li>取最大值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;max()&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;E&quot;</span>].publisher</span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .max()</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;最大值：<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: max() ===</span><br><span class="line">publisher: receive subscription: ([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;E&quot;</span>])</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (A)</span><br><span class="line">publisher: receive value: (F)</span><br><span class="line">publisher: receive value: (Z)</span><br><span class="line">publisher: receive value: (E)</span><br><span class="line">publisher: receive finished</span><br><span class="line">最大值：Z</span><br></pre></td></tr></table></figure>

<ul>
<li>取最大值 (要發佈結束，不然會一直等下去)</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;max()&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .max()</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;最大值：<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">    </span><br><span class="line">    publisher.send(<span class="number">1</span>)</span><br><span class="line">    publisher.send(<span class="number">2</span>)</span><br><span class="line">    publisher.send(completion: .finished)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: max() ===</span><br><span class="line">publisher: receive subscription: (PassthroughSubject)</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (1)</span><br><span class="line">publisher: receive value: (2)</span><br><span class="line">publisher: receive finished</span><br><span class="line">最大值：2</span><br></pre></td></tr></table></figure>

<h3 id="第一個值-first-最後一個值-last"><a href="#第一個值-first-最後一個值-last" class="headerlink" title="第一個值 - first() &#x2F; 最後一個值 - last()"></a><a href="https://juejin.cn/post/7020308230341410852">第一個值 - first() &#x2F; 最後一個值 - last()</a></h3><ul>
<li>取第一個值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;first()&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;E&quot;</span>].publisher</span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .first()</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;第一個值：<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: first() ===</span><br><span class="line">publisher: receive subscription: ([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;E&quot;</span>])</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (A)</span><br><span class="line">publisher: receive cancel</span><br><span class="line">第一個值：A</span><br></pre></td></tr></table></figure>

<ul>
<li>取第一個值 (自訂過濾條件)</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;first(where:)&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;J&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;N&quot;</span>].publisher</span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .first(where: &#123; <span class="string">&quot;Hello World&quot;</span>.contains(<span class="variable">$0</span>) &#125;)</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;符合條件的第一個值：<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: first(<span class="built_in">where</span>:) ===</span><br><span class="line">publisher: receive subscription: ([<span class="string">&quot;J&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;N&quot;</span>])</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (J)</span><br><span class="line">publisher: receive value: (O)</span><br><span class="line">publisher: receive value: (H)</span><br><span class="line">publisher: receive cancel</span><br><span class="line">符合條件的第一個值：H</span><br></pre></td></tr></table></figure>

<ul>
<li>取最後一個值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;last()&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;U&quot;</span>].publisher</span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .last()</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;最後一個值：<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: last() ===</span><br><span class="line">publisher: receive subscription: ([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;U&quot;</span>])</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (A)</span><br><span class="line">publisher: receive value: (E)</span><br><span class="line">publisher: receive value: (I)</span><br><span class="line">publisher: receive value: (O)</span><br><span class="line">publisher: receive value: (U)</span><br><span class="line">publisher: receive finished</span><br><span class="line">最後一個值：U</span><br></pre></td></tr></table></figure>

<h3 id="取某一個值-output-at-取某區間的值-output-in"><a href="#取某一個值-output-at-取某區間的值-output-in" class="headerlink" title="取某一個值 - output(at:) &#x2F; 取某區間的值 - output(in:)"></a><a href="https://www.kodeco.com/books/combine-asynchronous-programming-with-swift/v3.0/chapters/5-combining-operators">取某一個值 - output(at:) &#x2F; 取某區間的值 - output(in:)</a></h3><ul>
<li>取某一個值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;output(at:)&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;U&quot;</span>].publisher</span><br><span class="line">    <span class="keyword">let</span> index <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .output(at: index)</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;index = <span class="subst">\(index)</span>的值：<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: output(at:) ===</span><br><span class="line">publisher: receive subscription: ([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;U&quot;</span>])</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (A)</span><br><span class="line">publisher: request max: (1) (synchronous)</span><br><span class="line">publisher: receive value: (E)</span><br><span class="line">publisher: request max: (1) (synchronous)</span><br><span class="line">publisher: receive value: (I)</span><br><span class="line">index = 2的值：I</span><br><span class="line">publisher: receive cancel</span><br></pre></td></tr></table></figure>

<ul>
<li>取某區間的值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;output(in:)&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;U&quot;</span>].publisher</span><br><span class="line">    <span class="keyword">let</span> range <span class="operator">=</span> <span class="number">1</span><span class="operator">...</span><span class="number">3</span></span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .output(in: range)</span><br><span class="line">        .sink(</span><br><span class="line">            receiveCompletion: &#123; <span class="built_in">print</span>(<span class="variable">$0</span>) &#125;,</span><br><span class="line">            receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;區間內的值：<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">        )</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: output(<span class="keyword">in</span>:) ===</span><br><span class="line">區間內的值：E</span><br><span class="line">區間內的值：I</span><br><span class="line">區間內的值：O</span><br><span class="line">finished</span><br></pre></td></tr></table></figure>

<h3 id="取得數量-count"><a href="#取得數量-count" class="headerlink" title="取得數量 - count()"></a><a href="https://betterprogramming.pub/7-sequential-operators-you-should-know-from-swift-combine-1775ce3c47c8">取得數量 - count()</a></h3><ul>
<li>取得數量</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;count()&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>].publisher</span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .count()</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;有<span class="subst">\(<span class="variable">$0</span>)</span>個項目&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: count() ===</span><br><span class="line">publisher: receive subscription: ([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>])</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (A)</span><br><span class="line">publisher: receive value: (B)</span><br><span class="line">publisher: receive value: (C)</span><br><span class="line">publisher: receive finished</span><br><span class="line">有3個項目</span><br></pre></td></tr></table></figure>

<h3 id="處理包含的值-contains-contains-where"><a href="#處理包含的值-contains-contains-where" class="headerlink" title="處理包含的值 - contains() &#x2F; contains(where:)"></a><a href="https://paigeshin1991.medium.com/swift-combine-contains-operator-f47a213b6870">處理包含的值 - contains() &#x2F; contains(where:)</a></h3><ul>
<li>處理包含的值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;contains()&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>].publisher</span><br><span class="line">    <span class="keyword">let</span> letter <span class="operator">=</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .contains(letter)</span><br><span class="line">        .sink(receiveValue: &#123; isContains <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(isContains <span class="operator">?</span> <span class="string">&quot;Publisher包含 - <span class="subst">\(letter)</span>&quot;</span> : <span class="string">&quot;Publisher不包含 - <span class="subst">\(letter)</span>!&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: contains() ===</span><br><span class="line">publisher: receive subscription: ([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>])</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (A)</span><br><span class="line">publisher: receive value: (B)</span><br><span class="line">publisher: receive value: (C)</span><br><span class="line">publisher: receive cancel</span><br><span class="line">Publisher包含 - C</span><br></pre></td></tr></table></figure>

<ul>
<li>處理包含的值 (自訂過濾條件)</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;contains(where:)&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">        <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> people <span class="operator">=</span> [(<span class="number">123</span>, <span class="string">&quot;Shai Mishali&quot;</span>), (<span class="number">777</span>, <span class="string">&quot;Marin Todorov&quot;</span>), (<span class="number">214</span>, <span class="string">&quot;Florent Pillet&quot;</span>)]</span><br><span class="line">        .map(<span class="type">Person</span>.<span class="keyword">init</span>)</span><br><span class="line">        .publisher</span><br><span class="line"></span><br><span class="line">    people</span><br><span class="line">        .contains(where: &#123; <span class="variable">$0</span>.id <span class="operator">==</span> <span class="number">800</span> <span class="operator">||</span> <span class="variable">$0</span>.name <span class="operator">==</span> <span class="string">&quot;Marin Todorov&quot;</span> &#125;)</span><br><span class="line">        .sink(receiveValue: &#123; isContains <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(isContains <span class="operator">?</span> <span class="string">&quot;有找到符合條件的值&quot;</span> : <span class="string">&quot;沒有找到符合條件的值&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: contains(<span class="built_in">where</span>:) ===</span><br><span class="line">有找到符合條件的值</span><br></pre></td></tr></table></figure>

<h3 id="找到所有符合條件的值-allSatisfy"><a href="#找到所有符合條件的值-allSatisfy" class="headerlink" title="找到所有符合條件的值 - allSatisfy()"></a><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/swift-%E9%9B%86%E5%90%88%E7%9A%84-contains-allsatisfy-%E5%88%A4%E6%96%B7-%E9%9B%86%E5%90%88%E8%A3%A1%E7%9A%84%E6%9D%B1%E8%A5%BF%E6%98%AF%E5%90%A6%E7%AC%A6%E5%90%88%E6%A2%9D%E4%BB%B6-35adc54ed397">找到所有符合條件的值 - allSatisfy()</a></h3><ul>
<li>找到所有符合條件的值</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;allSatisfy()&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, to: <span class="number">5</span>, by: <span class="number">1</span>).publisher</span><br><span class="line">    <span class="keyword">let</span> condition: (<span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="operator">=</span> &#123; <span class="variable">$0</span> <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .allSatisfy &#123; condition(<span class="variable">$0</span>) &#125;</span><br><span class="line">        .sink(receiveValue: &#123; isAllEven <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(isAllEven <span class="operator">?</span> <span class="string">&quot;全部都是偶數&quot;</span> : <span class="string">&quot;不全都是偶數&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: allSatisfy() ===</span><br><span class="line">publisher: receive subscription: (Sequence)</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (0)</span><br><span class="line">publisher: receive value: (1)</span><br><span class="line">publisher: receive cancel</span><br><span class="line">不全都是偶數</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E6%95%99%E5%AE%A4/array-%E7%9A%84%E9%AB%98%E9%9A%8E%E5%87%BD%E5%BC%8F-filter-map-and-reduce-39fb8ba5a9f7">依照條件合併</a></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">example(of: <span class="string">&quot;reduce()&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> publisher <span class="operator">=</span> [<span class="string">&quot;Hel&quot;</span>, <span class="string">&quot;lo&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;Wor&quot;</span>, <span class="string">&quot;ld&quot;</span>, <span class="string">&quot;!&quot;</span>].publisher</span><br><span class="line"></span><br><span class="line">    publisher</span><br><span class="line">        .print(<span class="string">&quot;publisher&quot;</span>)</span><br><span class="line">        .reduce(<span class="string">&quot;&quot;</span>, <span class="operator">+</span>)</span><br><span class="line">        .sink(receiveValue: &#123; <span class="built_in">print</span>(<span class="string">&quot;合併為：<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;)</span><br><span class="line">        .store(in: <span class="operator">&amp;</span>subscriptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">=== 範例: reduce() ===</span><br><span class="line">publisher: receive subscription: ([<span class="string">&quot;Hel&quot;</span>, <span class="string">&quot;lo&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;Wor&quot;</span>, <span class="string">&quot;ld&quot;</span>, <span class="string">&quot;!&quot;</span>])</span><br><span class="line">publisher: request unlimited</span><br><span class="line">publisher: receive value: (Hel)</span><br><span class="line">publisher: receive value: (lo)</span><br><span class="line">publisher: receive value: ( )</span><br><span class="line">publisher: receive value: (Wor)</span><br><span class="line">publisher: receive value: (ld)</span><br><span class="line">publisher: receive value: (!)</span><br><span class="line">publisher: receive finished</span><br><span class="line">合併為：Hello World!</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>swift</category>
      </categories>
      <tags>
        <tag>combine</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS Widget（3）：App与Widget数据共享</title>
    <url>/2024/02/29/Widget/App%E4%B8%8EWidget%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/</url>
    <content><![CDATA[<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><p>  Widget是一个迷你版的App，iOS有沙盒机制，不同App之间无法直接共享数据。组件和主App之间其实就是不同App的关系，所以也无法通过userdefaults.standard来传数据，苹果为了在不打破沙盒的前提下能够传数据，就想出了App Group的方法。</p>
<h3 id="二、数据共享方式"><a href="#二、数据共享方式" class="headerlink" title="二、数据共享方式"></a>二、数据共享方式</h3><p> 可以通过网络和本地数据两种方式进行数据的共享，本地数据共享可以通过 App Groups。</p>
<h3 id="四、App-Groups-原理"><a href="#四、App-Groups-原理" class="headerlink" title="四、App Groups 原理"></a>四、App Groups 原理</h3><p>  它是 iOS 8 之后推出的在 App 之间共享数据的方式，只需要简单的配置就可以实现数据的共享。它主要用于同一group下的app共享同一份读写空间，以实现数据共享。编码 App Groups只能异步同步数据，当Widget读取数据的时候，只能读之前手机App保存的数据，相反也是如此。当手机App有新的数据保存时，不能及时的通知Widget更新数据，只能是Widget下次去主动获取数据。 </p>
<p><img src="/../../source/images/App%E4%B8%8EWidget%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/2ibpzxym06.png" alt="img"></p>
<p><img src="/../../source/images/App%E4%B8%8EWidget%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/a2ch818mkj.png" alt="img"></p>
<h3 id="五、配置证书"><a href="#五、配置证书" class="headerlink" title="五、配置证书"></a>五、配置证书</h3><p>  由于widget项目和主项目其实是两个独立的appID，因为需要单独给widget配置证书，配置证书的过程参考APP证书配置；</p>
<h4 id="开启APP-Groups"><a href="#开启APP-Groups" class="headerlink" title="开启APP Groups"></a>开启APP Groups</h4><p>  开启APP Groups是为了widget和app之间实现数据共享；为了便于后续操作，请先确保你的开发者账号在Xcode上处于登录状态。</p>
<h4 id="在app中开启："><a href="#在app中开启：" class="headerlink" title="在app中开启："></a>在app中开启：</h4><ul>
<li><ul>
<li>TARGETS–&gt;AppExtensionDemo–&gt;Capabilities–&gt;App Groups</li>
</ul>
</li>
<li><ul>
<li>找到以后，将App Groups右上角的开关打开，然后选择添加groups,注意命名要规范，比如：group.com.company.app;</li>
</ul>
</li>
</ul>
<h4 id="在extension中开启"><a href="#在extension中开启" class="headerlink" title="在extension中开启"></a>在extension中开启</h4><p>假设创建widget target的名称为TodayExtension，对应的App Group位于</p>
<ul>
<li>TARGETS–&gt;TodayExtension–&gt;Capabilities–&gt;App Groups</li>
<li>开启的方式和APP中一样，注意必须要保证这里的App Groups名称和APP中相同。</li>
</ul>
<h3 id="六、App-Groups特点"><a href="#六、App-Groups特点" class="headerlink" title="六、App Groups特点"></a>六、App Groups特点</h3><p>  App Group容器只是在宿主app运行期间才存在，其中的容器用于扩展与宿主的文件共享，宿主被关闭了，共享也就没意义了。 以上来自于实际测试，测试过程是：在宿主app运行期间，点击其中的按钮弹出模态视图控制器，进行数据填充。完成后保存数据到App Group容器中的文件中，以供today extension扩展进行数据使用。只要将宿主app杀掉后重启启动宿主app，today extension 中已经显示的数据就完全没有了。单纯将宿主app杀掉不重启，today extension的任然hi显示之前的内容。由于宿主app中显示的数据也是从app group中的文件中取出来的，所以数据也没了。</p>
<p>  由于这个共享机制的特殊性，这个容器不能用来长期保存文件！！！应该将文件存储到宿主app的文件夹中，可以长期存储。today extension展示的数据量较少，在合适的时候将其需要的数据搬运到app group中！</p>
<h3 id="七、示例代码"><a href="#七、示例代码" class="headerlink" title="七、示例代码"></a>七、示例代码</h3><p>配置好项目的 group 后，我们开始进行数据的配置。我们采用AppStorage来存储数据。</p>
<p><code>AppStorage</code>是<code>Swift中</code>的一个属性包装器，用于在iOS应用程序中存储和管理用户默认设置。它使开发人员能够轻松地将应用程序的状态持久化到用户的设备上.</p>
<p>要使用AppStorage，首先需要声明一个带有存储属性包装器的属性。例如，您可以将一个布尔值标记为应用程序设置：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AppStorage</span>(<span class="string">&quot;isDarkModeEnabled&quot;</span>) <span class="keyword">var</span> isDarkModeEnabled <span class="operator">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>在上面的示例中，我们将名为”isDarkModeEnabled”的属性标记为应用程序设置，并将其初始值设置为false。如果用户更改了这个设置，在应用程序下次启动时，它将自动加载用户上次的选择.</p>
<h4 id="1-在我们的项目中，我们新建一个DataService的结构体，用来管理数据"><a href="#1-在我们的项目中，我们新建一个DataService的结构体，用来管理数据" class="headerlink" title="1.在我们的项目中，我们新建一个DataService的结构体，用来管理数据"></a>1.在我们的项目中，我们新建一个<code>DataService</code>的结构体，用来管理数据</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AppStorage</span>(<span class="string">&quot;streak&quot;</span>, store: <span class="type">UserDefaults</span>(suiteName: <span class="string">&quot;group.com.cft.widgetstudy&quot;</span>)) <span class="keyword">private</span> <span class="keyword">var</span> streak <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">count</span>() -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> streak</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@AppStorage(&quot;streak&quot;, store: UserDefaults(suiteName: &quot;group.com.cft.widgetstudy&quot;)) private var streak = 0</code> 这行代码的意思是将一个名为”streak”的属性标记为应用程序设置，并将其存储在名为<code>group.com.cft.widgetstudy</code>的共享UserDefaults实例中。</p>
<p>因此，通过传递一个自定义的UserDefaults实例给AppStorage的store参数，我们可以将属性的值存储在特定的UserDefaults实例中，以便跨应用程序组件进行共享。</p>
<h4 id="2-主项目代码"><a href="#2-主项目代码" class="headerlink" title="2.主项目代码"></a>2.主项目代码</h4><p>在主项目中，我们创建一个 Text 用来显示计数，创建一个 Button，每点击一下 button，计数值加 1, 同时调用<code>WidgetCenter.shared.reloadAllTimelines()</code>去刷新小组件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> WidgetKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AppStorage</span>(<span class="string">&quot;streak&quot;</span>, store: <span class="type">UserDefaults</span>(suiteName: <span class="string">&quot;group.com.cft.widgetstudy&quot;</span>)) <span class="keyword">var</span> streak <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Count: <span class="subst">\(streak)</span>&quot;</span>)</span><br><span class="line">                .font(.largeTitle)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(action: &#123;</span><br><span class="line">                streak <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                <span class="type">WidgetCenter</span>.shared.reloadAllTimelines()</span><br><span class="line">            &#125;) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Increment Count&quot;</span>)</span><br><span class="line">                    .padding()</span><br><span class="line">                    .background(<span class="type">Color</span>.blue)</span><br><span class="line">                    .foregroundColor(.white)</span><br><span class="line">                    .cornerRadius(<span class="number">10</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-小组件代码"><a href="#3-小组件代码" class="headerlink" title="3.小组件代码"></a>3.小组件代码</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  widgetdemo.swift</span></span><br><span class="line"><span class="comment">//  widgetdemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by cft on 2023/11/19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> WidgetKit</span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Provider</span>: <span class="title class_">TimelineProvider</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> <span class="type">DataService</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//它本质上是向系统提供虚拟数据，以在等待小部件准备就绪的同时呈现占位符 UI。请注意，SwiftUI 会对我们提供的虚拟数据应用编辑效果，因此虚拟数据的实际价值并不重要</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">placeholder</span>(<span class="params">in</span> <span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">SimpleEntry</span> &#123;</span><br><span class="line">        <span class="type">SimpleEntry</span>(date: <span class="type">Date</span>(), streak: data.count())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该函数主要提供系统在小部件图库中渲染小部件所需的数据。</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getSnapshot</span>(<span class="params">in</span> <span class="params">context</span>: <span class="type">Context</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">SimpleEntry</span>) -&gt; ()) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> entry <span class="operator">=</span> <span class="type">SimpleEntry</span>(date: <span class="type">Date</span>(), streak: data.count())</span><br><span class="line">        completion(entry)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getTimeline</span>(<span class="params">in</span> <span class="params">context</span>: <span class="type">Context</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">Timeline</span>&lt;<span class="type">Entry</span>&gt;) -&gt; ()) &#123;</span><br><span class="line">        <span class="keyword">var</span> entries: [<span class="type">SimpleEntry</span>] <span class="operator">=</span> []</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate a timeline consisting of five entries an hour apart, starting from the current date.</span></span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">for</span> hourOffset <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> entryDate <span class="operator">=</span> <span class="type">Calendar</span>.current.date(byAdding: .hour, value: hourOffset, to: currentDate)<span class="operator">!</span></span><br><span class="line">            <span class="keyword">let</span> entry <span class="operator">=</span> <span class="type">SimpleEntry</span>(date: entryDate, streak: data.count())</span><br><span class="line">            entries.append(entry)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> timeline <span class="operator">=</span> <span class="type">Timeline</span>(entries: entries, policy: .atEnd)</span><br><span class="line">        completion(timeline)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SimpleEntry</span>: <span class="title class_">TimelineEntry</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> date: <span class="type">Date</span></span><br><span class="line">    <span class="keyword">let</span> streak: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">widgetdemoEntryView</span> : <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> entry: <span class="type">Provider</span>.<span class="type">Entry</span></span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> <span class="type">DataService</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(entry.date, style: .time)</span><br><span class="line"></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Count:<span class="subst">\(data.count())</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">widgetdemo</span>: <span class="title class_">Widget</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> kind: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;widgetdemo&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">WidgetConfiguration</span> &#123;</span><br><span class="line">        <span class="type">StaticConfiguration</span>(kind: kind, provider: <span class="type">Provider</span>()) &#123; entry <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">17.0</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">                widgetdemoEntryView(entry: entry)</span><br><span class="line">                    .containerBackground(.fill.tertiary, for: .widget)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                widgetdemoEntryView(entry: entry)</span><br><span class="line">                    .padding()</span><br><span class="line">                    .background()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .configurationDisplayName(<span class="string">&quot;My Widget&quot;</span>)</span><br><span class="line">        .description(<span class="string">&quot;This is an example widget.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="type">Preview</span>(as: .systemSmall) &#123;</span><br><span class="line">    widgetdemo()</span><br><span class="line">&#125; timeline: &#123;</span><br><span class="line">    <span class="type">SimpleEntry</span>(date: .now, streak: <span class="number">1</span>)</span><br><span class="line">    <span class="type">SimpleEntry</span>(date: .now, streak: <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小组件中的代码比较简单，就是去调用DataService的count()的方法，去获取计数值，显示在小组件中。</p>
<p><img src="/../../source/images/App%E4%B8%8EWidget%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/widget-9206162.gif" alt="widget"></p>
<p>代码地址：<a href="https://gitee.com/chengft/ios_demos/tree/master/%E5%B0%8F%E7%BB%84%E4%BB%B6/widgetStudy">https://gitee.com/chengft/ios_demos/tree/master/%E5%B0%8F%E7%BB%84%E4%BB%B6/widgetStudy</a></p>
<p>参考：<a href="https://cloud.tencent.com/developer/article/1836554">https://cloud.tencent.com/developer/article/1836554</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>widget</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS Widget（2）：小组件刷新机制</title>
    <url>/2024/02/23/Widget/%E5%B0%8F%E7%BB%84%E4%BB%B6%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>  前面的章节学完已经让我们可以顺利实现一个小组件了，但是小组件里面的数据如何刷新的呢，本节内容将讲解IOS的刷新机制。</p>
<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ul>
<li>系统如何管理小组件刷新</li>
<li>Timeline刷新机制</li>
<li>Timeline刷新机制代码实现</li>
<li>刷新策略建议</li>
<li>时钟刷新策略（只有小时分钟，没有秒）</li>
<li>主动请求重新刷新</li>
</ul>
<h3 id="系统如何管理小组件刷新"><a href="#系统如何管理小组件刷新" class="headerlink" title="系统如何管理小组件刷新"></a>系统如何管理小组件刷新</h3><ol>
<li>WidgetKit在一个单独的进程中渲染小组件视图</li>
<li>即使小组件窗口显示在屏幕上，widget extension 也不会持续处于活动状态</li>
<li>为了管理系统负载，WidgetKit使用预算来分配一天中的窗口小组件重载</li>
<li>WidgetKit为用户添加到其设备的每个活动小组件维护不同的预算</li>
<li>每日预算通常包括40到70次刷新。该速率大致可转换为小组件每15至60分钟重新加载一次，但是由于涉及到许多因素，因此这些时间间隔是不固定的。</li>
</ol>
<p>综上所述，小组件的刷不能由开发者自由控制，官方建议如下:</p>
<ol>
<li>如果您的小组件可以预测应重新加载的时间点，则最好的方法是为尽可能多的将来日期生成时间线。</li>
<li>时间轴中的条目间隔应保持尽可能大。</li>
<li>时间轴应创建至少相隔5分钟的时间轴条目。</li>
<li>WidgetKit可能会在多个窗口小组件之间合并重新加载，从而影响窗口小组件重新加载的确切时间。</li>
</ol>
<h3 id="Timeline刷新机制"><a href="#Timeline刷新机制" class="headerlink" title="Timeline刷新机制"></a>Timeline刷新机制</h3><p><img src="/../../source/images/%E5%B0%8F%E7%BB%84%E4%BB%B6%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/d528rgj7sy-20240223175420734.png" alt="img"></p>
<p> 该图显示了WidgetKit请求时间线，提供程序生成时间线以及3小时后的时间进度，之后WidgetKit请求新的时间线</p>
<p><img src="/../../source/images/%E5%B0%8F%E7%BB%84%E4%BB%B6%E5%88%B7%E6%96%B0%E6%9C%BA%E5%88%B6/4racyrnie9-20240223175420811.png" alt="img"></p>
<p> 该图显示了WidgetKit请求时间线，提供程序生成时间线以及WidgetKit在2小时后请求新时间线的图</p>
<p>Timeline刷新机制代码实现（新增组件时，系统默认就实现了）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getTimeline</span>(<span class="params">for</span> <span class="params">configuration</span>: <span class="type">TimeTypeConfigurationIntent</span>, <span class="params">in</span> <span class="params">context</span>: <span class="type">Context</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">Timeline</span>&lt;<span class="type">Entry</span>&gt;) -&gt; ()) &#123;</span><br><span class="line">    <span class="keyword">var</span> entries: [<span class="type">SimpleEntry</span>] <span class="operator">=</span> []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate a timeline consisting of five entries an hour apart, starting from the current date.</span></span><br><span class="line">    <span class="keyword">let</span> currentDate <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line">    <span class="keyword">for</span> hourOffset <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> <span class="number">5</span> &#123;</span><br><span class="line">        <span class="comment">// 下面这个代码表示，在当前日期上加上 hourOffset 个小时得到一个新的日期</span></span><br><span class="line">        <span class="comment">// .hour可以换成 .second .minute .day 等</span></span><br><span class="line">        <span class="keyword">let</span> entryDate <span class="operator">=</span> <span class="type">Calendar</span>.current.date(byAdding: .hour, value: hourOffset, to: currentDate)<span class="operator">!</span></span><br><span class="line">        <span class="keyword">let</span> entry <span class="operator">=</span> <span class="type">SimpleEntry</span>(date: entryDate, configuration: configuration)</span><br><span class="line">        entries.append(entry)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用回调方法把生成好的时间线数据传递给系统</span></span><br><span class="line">    <span class="comment">// policy 表示刷新策略</span></span><br><span class="line">    <span class="comment">// .atEnd 表示，所有的时间线条目完成之后重新刷新一次，表现就是这个getTimeline方法被回调一次</span></span><br><span class="line">    <span class="comment">// .after(date: Date) 表示，多久时间结束后再刷新一次</span></span><br><span class="line">    <span class="comment">// .never表示时间轴走完就不刷了</span></span><br><span class="line">    <span class="keyword">let</span> timeline <span class="operator">=</span> <span class="type">Timeline</span>(entries: entries, policy: .atEnd)</span><br><span class="line">    completion(timeline)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>备注：   </p>
<blockquote>
<p>网上大部分资料都写着Timeline时间轴相隔5分钟，即每次创建5分钟内的刷新条目，但是小组件预算每日40到70次刷新，假设按70次算，总时间70 * 5 &#x3D; 350分钟，大约6个小时就把次数用完了。所以大部分情况5分钟的间隔确实可以满足了，但是难免还是有用户把这个限制次数用完了。保险起见，尽量把时间间隔扩大，如果内存消耗不大，可以把间隔控制在60分钟，时间轴上每个条目间隔1分钟。这样几乎不会把系统给小组件的预算刷新次数给用完。</p>
<p>正是因为IOS系统对小组件有刷新次数有限制和内存方面的限制（官网没有找到，但是看到网友们说是30M左右的限制，自己使用过程中也发现了占用内存过多导致进程被挂起，小组件就展示不出来了），所以没控制好刷新策略的话，可能经常会出现小组件界面展示不出来，或者过了一段时间之后，小组件直接不刷新了。</p>
</blockquote>
<h3 id="刷新策略建议"><a href="#刷新策略建议" class="headerlink" title="刷新策略建议"></a>刷新策略建议</h3><ol>
<li>每次刷新时，时间轴准备好15-60分钟的刷新数据，最少是5分钟</li>
<li>时间轴每个刷新条目时间间隔尽可能大，时钟内组件间隔可以设置为1分钟</li>
<li>条目数量不宜过多，越少越好，时钟组件最多60左右</li>
<li>不要在5分钟内创建300个条目来做时钟按秒刷新，大概率会失败</li>
</ol>
<h3 id="时钟刷新策略（只有小时分钟，没有秒）"><a href="#时钟刷新策略（只有小时分钟，没有秒）" class="headerlink" title="时钟刷新策略（只有小时分钟，没有秒）"></a>时钟刷新策略（只有小时分钟，没有秒）</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">prepareEntriesEveryMinute</span>(<span class="keyword">_</span> <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">Timeline</span>&lt;<span class="type">WidgetEntry</span>&gt;) -&gt; ()) &#123;</span><br><span class="line">    <span class="comment">// 第一次刷新时间：延迟2秒刷</span></span><br><span class="line">    <span class="keyword">let</span> firstDate <span class="operator">=</span> <span class="type">Provider</span>.getFirstEntryDate()</span><br><span class="line">    <span class="comment">// 第二次刷新时间：第一个整分钟时刷</span></span><br><span class="line">    <span class="keyword">let</span> firstMinuteDate <span class="operator">=</span> <span class="type">Provider</span>.getFirstMinuteEntryDate()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> entries: [<span class="type">WidgetEntry</span>] <span class="operator">=</span> []</span><br><span class="line">    entries.append(<span class="type">WidgetEntry</span>(date: firstDate))</span><br><span class="line">    entries.append(<span class="type">WidgetEntry</span>(date: firstMinuteDate))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后面以第一个整点分钟开始，每次加一分钟刷</span></span><br><span class="line">    <span class="keyword">for</span> minuteOffset <span class="keyword">in</span> <span class="number">1</span> <span class="operator">..&lt;</span> <span class="number">60</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> entryDate <span class="operator">=</span> <span class="type">Calendar</span>.current.date(byAdding: .minute, value: minuteOffset, to: firstMinuteDate) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        entries.append(<span class="type">WidgetEntry</span>(date: entryDate))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> timeline <span class="operator">=</span> <span class="type">Timeline</span>(entries: entries, policy: .atEnd)</span><br><span class="line">    completion(timeline)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">getFirstEntryDate</span>() -&gt; <span class="type">Date</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> offsetSecond: <span class="type">TimeInterval</span> <span class="operator">=</span> <span class="type">TimeInterval</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">var</span> currentDate <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line">    currentDate <span class="operator">+=</span> offsetSecond</span><br><span class="line">    <span class="keyword">return</span> currentDate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一个分钟时间点所处的时间点</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">getFirstMinuteEntryDate</span>() -&gt; <span class="type">Date</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> currentDate <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line">    <span class="keyword">let</span> passSecond <span class="operator">=</span> <span class="type">Calendar</span>.current.component(.second, from: currentDate)</span><br><span class="line">    <span class="keyword">let</span> offsetSecond: <span class="type">TimeInterval</span> <span class="operator">=</span> <span class="type">TimeInterval</span>(<span class="number">60</span> <span class="operator">-</span> passSecond)</span><br><span class="line">    currentDate <span class="operator">+=</span> offsetSecond</span><br><span class="line">    <span class="keyword">return</span> currentDate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复制</p>
<h3 id="主动请求重新刷新"><a href="#主动请求重新刷新" class="headerlink" title="主动请求重新刷新"></a>主动请求重新刷新</h3><p>如果在App中修改了小组件的数据，可以通过如下的方式主动触发WidgetKit刷新小组件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定刷新哪个组件</span></span><br><span class="line"><span class="type">WidgetCenter</span>.shared.reloadTimelines(ofKind: <span class="string">&quot;com.mygame.character-detail&quot;</span>)</span><br><span class="line"><span class="comment">// 刷新全部组件</span></span><br><span class="line"><span class="type">WidgetCenter</span>.shared.reloadAllTimelines()</span><br></pre></td></tr></table></figure>



<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>  小组件的刷新，官方文档都没有明确说明到底是什么具体的规则，只说了有各种限制，系统会动态管理。所以在实际开发中可能会遇到小组件数据不刷新的问题，遇到这种情况，请减少Timeline中的条目数量，优化内存，确保小组件代码里面没有异常。小组件运行在单独的进程，如果异常会导致小组件进程卡死了，一个小组件出问题，其他小组件都不刷新了。既然刷新这么难控制，怎么实现数字时钟按秒刷新呢？下一节揭晓。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>widget</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS Widget（1）：小组件框架解析</title>
    <url>/2024/02/22/Widget/%E5%B0%8F%E7%BB%84%E4%BB%B6%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>  看了小组件的概述，你肯定想马上搞一个小组件出来试试，实践中学习效果更佳</p>
<h3 id="本文大纲"><a href="#本文大纲" class="headerlink" title="本文大纲"></a>本文大纲</h3><ul>
<li>创建小组件</li>
<li>认识小组件框架各个组成部分</li>
</ul>
<h3 id="创建小组件"><a href="#创建小组件" class="headerlink" title="创建小组件"></a>创建小组件</h3><ul>
<li>第一步：先创建好一个App，步骤省略</li>
<li>第二步：在App中创建小组件 1. 在Xcode中打开您的应用程序项目，然后选择 File &gt; New &gt; Target。 2. 从“Application Extension”组中，选择“Widget Extension”，然后单击“Next”。 3. 输入小组件的名称。 4. 如果需要给小组件提供用户可配置的属性，请选中“Include Configuration Intent”复选框。 5. 单击 Finish。</li>
</ul>
<p><img src="/../../source/images/iOS-Widget%EF%BC%882%EF%BC%89%EF%BC%9A%E5%B0%8F%E7%BB%84%E4%BB%B6%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/9xk0q4hhyl-20240223175455752.png" alt="img"></p>
<p><img src="/../../source/images/iOS-Widget%EF%BC%882%EF%BC%89%EF%BC%9A%E5%B0%8F%E7%BB%84%E4%BB%B6%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/8ya3kjts4n-20240223175455749.png" alt="img"></p>
<h3 id="认识小组件框架各个组成部分"><a href="#认识小组件框架各个组成部分" class="headerlink" title="认识小组件框架各个组成部分"></a>认识小组件框架各个组成部分</h3><p>  如果没有勾选“Include Configuration Intent”，默认生成如下代码，这里新建的时候小组件的名字是 “Widget1”</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Widget1.swift</span></span><br><span class="line"><span class="comment">//  Widget1</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> WidgetKit</span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间线刷新策略控制</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Provider</span>: <span class="title class_">TimelineProvider</span> &#123;</span><br><span class="line">    <span class="comment">// 窗口首次展示的时候，先展示占数据</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">placeholder</span>(<span class="params">in</span> <span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">SimpleEntry</span> &#123;</span><br><span class="line">        <span class="type">SimpleEntry</span>(date: <span class="type">Date</span>())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加组件时的预览数据</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getSnapshot</span>(<span class="params">in</span> <span class="params">context</span>: <span class="type">Context</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">SimpleEntry</span>) -&gt; ()) &#123;</span><br><span class="line">        <span class="keyword">let</span> entry <span class="operator">=</span> <span class="type">SimpleEntry</span>(date: <span class="type">Date</span>())</span><br><span class="line">        completion(entry)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间线刷新策略控制逻辑</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getTimeline</span>(<span class="params">in</span> <span class="params">context</span>: <span class="type">Context</span>, <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">Timeline</span>&lt;<span class="type">Entry</span>&gt;) -&gt; ()) &#123;</span><br><span class="line">        <span class="keyword">var</span> entries: [<span class="type">SimpleEntry</span>] <span class="operator">=</span> []</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate a timeline consisting of five entries an hour apart, starting from the current date.</span></span><br><span class="line">        <span class="keyword">let</span> currentDate <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line">        <span class="keyword">for</span> hourOffset <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> entryDate <span class="operator">=</span> <span class="type">Calendar</span>.current.date(byAdding: .hour, value: hourOffset, to: currentDate)<span class="operator">!</span></span><br><span class="line">            <span class="keyword">let</span> entry <span class="operator">=</span> <span class="type">SimpleEntry</span>(date: entryDate)</span><br><span class="line">            entries.append(entry)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> timeline <span class="operator">=</span> <span class="type">Timeline</span>(entries: entries, policy: .atEnd)</span><br><span class="line">        completion(timeline)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SimpleEntry</span>: <span class="title class_">TimelineEntry</span> &#123;</span><br><span class="line">    <span class="comment">// 默认带了一个日期参数</span></span><br><span class="line">    <span class="keyword">let</span> date: <span class="type">Date</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Widget1EntryView</span> : <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">// 组件数据</span></span><br><span class="line">    <span class="keyword">var</span> entry: <span class="type">Provider</span>.<span class="type">Entry</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个 body 中就是自己需要实现的组件布局</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(entry.date, style: .time)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小组件入口</span></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Widget1</span>: <span class="title class_">Widget</span> &#123;</span><br><span class="line">    <span class="comment">// 小组件的唯一ID</span></span><br><span class="line">    <span class="keyword">let</span> kind: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;Widget1&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">WidgetConfiguration</span> &#123;</span><br><span class="line">        <span class="comment">// 创建时不勾选 “Include Configuration Intent”，这里使用 StaticConfiguration</span></span><br><span class="line">        <span class="type">StaticConfiguration</span>(kind: kind, provider: <span class="type">Provider</span>()) &#123; entry <span class="keyword">in</span></span><br><span class="line">            <span class="type">Widget1EntryView</span>(entry: entry)  <span class="comment">// 小组件UI</span></span><br><span class="line">        &#125;</span><br><span class="line">        .supportedFamilies([.systemSmall, .systemLarge])  <span class="comment">// 配置该组件支持的尺寸，如果不配置，默认是大中小都支持</span></span><br><span class="line">        .configurationDisplayName(<span class="string">&quot;组件标题&quot;</span>)   <span class="comment">// 在添加组件预览界面显示</span></span><br><span class="line">        .description(<span class="string">&quot;组件描述&quot;</span>)                 <span class="comment">// 在添加组件预览界面显示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调试预览</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Widget1_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Widget1EntryView</span>(entry: <span class="type">SimpleEntry</span>(date: <span class="type">Date</span>()))</span><br><span class="line">            .previewContext(<span class="type">WidgetPreviewContext</span>(family: .systemSmall))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复制</p>
<p>运行上面的代码，在桌面添加一个小组件，效果如下（对着图再看上面的代码注释就能一一对应上） </p>
<p><img src="/../../source/images/iOS-Widget%EF%BC%882%EF%BC%89%EF%BC%9A%E5%B0%8F%E7%BB%84%E4%BB%B6%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/5x3ylvn0iz-20240223175455825.png" alt="img"></p>
<p><img src="/../../source/images/iOS-Widget%EF%BC%882%EF%BC%89%EF%BC%9A%E5%B0%8F%E7%BB%84%E4%BB%B6%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/zjg00yagtf-20240223175455918.png" alt="img"></p>
<h4 id="小组件核心代码"><a href="#小组件核心代码" class="headerlink" title="小组件核心代码"></a>小组件核心代码</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小组件入口</span></span><br><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Widget1</span>: <span class="title class_">Widget</span> &#123;</span><br><span class="line">    <span class="comment">// 小组件的唯一ID</span></span><br><span class="line">    <span class="keyword">let</span> kind: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;Widget1&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">WidgetConfiguration</span> &#123;</span><br><span class="line">        <span class="comment">// 创建时不勾选 “Include Configuration Intent”，这里使用 StaticConfiguration</span></span><br><span class="line">        <span class="type">StaticConfiguration</span>(kind: kind, provider: <span class="type">Provider</span>()) &#123; entry <span class="keyword">in</span></span><br><span class="line">            <span class="type">Widget1EntryView</span>(entry: entry)  <span class="comment">// 小组件UI</span></span><br><span class="line">        &#125;</span><br><span class="line">        .supportedFamilies([.systemSmall, .systemLarge])  <span class="comment">// 配置该组件支持的尺寸，如果不配置，默认是大中小都支持</span></span><br><span class="line">        .configurationDisplayName(<span class="string">&quot;组件标题&quot;</span>)   <span class="comment">// 在添加组件预览界面显示</span></span><br><span class="line">        .description(<span class="string">&quot;组件描述&quot;</span>)                 <span class="comment">// 在添加组件预览界面显示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复制</p>
<h4 id="小组件核心代码注解如下："><a href="#小组件核心代码注解如下：" class="headerlink" title="小组件核心代码注解如下："></a>小组件核心代码注解如下：</h4><ul>
<li>kind是标识小组件的唯一ID</li>
<li>body也是必须实现的，返回小组件的配置信息</li>
<li>StaticConfiguration 标识小组件不支持动态修改配置（后面会详细展开） .supportedFamilies 设置小组件的尺寸类型，总共三种：.systemSmall, .systemMedium, .systemLarge .configurationDisplayName(“组件标题”) .description(“组件描述”)</li>
<li>Provider是给小组件提供刷新策略以及给小组件准备数据的核心</li>
<li>Widget1EntryView(entry: entry)，根据Provider提供的数据实体entry绘制小组件的UI</li>
</ul>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>  默认新建一个小组件，开发工具已经默认生成了一份完整的小组件代码。后续文章会详细讲解其中的各个细节点，比如：Provider的刷新机制，小组件的动态配置，SwiftUI开发入门等</p>
<p>转载自：<a href="https://cloud.tencent.com/developer/article/1820739">https://cloud.tencent.com/developer/article/1820739</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>widget</tag>
      </tags>
  </entry>
  <entry>
    <title>1.jQuery介绍</title>
    <url>/2022/02/21/jQuery/1.jQuery%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><h4 id="1-jQuery-语法"><a href="#1-jQuery-语法" class="headerlink" title="1.jQuery 语法"></a>1.jQuery 语法</h4><p>jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</p>
<p>基础语法： <code>$(selector).action()</code></p>
<ul>
<li>美元符号定义 jQuery</li>
<li>选择符（selector）”查询”和”查找” HTML 元素</li>
<li>jQuery 的 <code>action()</code> 执行对元素的操作</li>
</ul>
<p>实例:</p>
<ul>
<li><code>$(this).hide()</code> - 隐藏当前元素</li>
<li><code>$(&quot;p&quot;).hide()</code> - 隐藏所有 <p> 元素</li>
<li><code>$(&quot;p.test&quot;).hide()</code> - 隐藏所有 class&#x3D;”test” 的 <p> 元素</li>
<li><code>$(&quot;#test&quot;).hide()</code> - 隐藏 id&#x3D;”test” 的元素</li>
</ul>
<h4 id="2-文档就绪事件"><a href="#2-文档就绪事件" class="headerlink" title="2.文档就绪事件"></a>2.文档就绪事件</h4><p>您也许已经注意到在我们的实例中的所有 jQuery 函数位于一个 document ready 函数中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line"> </span><br><span class="line">   // 开始写 jQuery 代码...</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作</p>
<p><strong>提示：</strong>简洁写法（与以上写法效果相同）:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line"> </span><br><span class="line">   // 开始写 jQuery 代码...</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="3-jQuery-选择器"><a href="#3-jQuery-选择器" class="headerlink" title="3.jQuery 选择器"></a>3.jQuery 选择器</h4><h5 id="1-元素选择器"><a href="#1-元素选择器" class="headerlink" title="1&gt;元素选择器"></a>1&gt;元素选择器</h5><p>jQuery 元素选择器基于元素名选取元素。</p>
<p>在页面中选取所有 <p> 元素,<code>$(&quot;p&quot;)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;p&quot;).hide();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="2-id-选择器"><a href="#2-id-选择器" class="headerlink" title="2&gt;#id 选择器"></a>2&gt;#id 选择器</h5><p>jQuery #id 选择器通过 HTML 元素的 id 属性选取指定的元素。页面中元素的 id 应该是唯一的，所以您要在页面中选取唯一的元素需要通过 #id 选择器。</p>
<p>通过 id 选取元素语法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(&quot;#test&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<p>当用户点击按钮后，有 id&#x3D;”test” 属性的元素将被隐藏：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;#test&quot;).hide();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="3-class-选择器"><a href="#3-class-选择器" class="headerlink" title="3&gt;.class 选择器"></a>3&gt;.class 选择器</h5><p>jQuery 类选择器可以通过指定的 class 查找元素。</p>
<p>语法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(&quot;.test&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<p>用户点击按钮后所有带有 class&#x3D;”test” 属性的元素都隐藏：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">    $(&quot;.test&quot;).hide();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="更多实例"><a href="#更多实例" class="headerlink" title="更多实例"></a>更多实例</h5><table>
<thead>
<tr>
<th align="left">语法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$(“*”)</td>
<td align="left">选取所有元素</td>
</tr>
<tr>
<td align="left">$(this)</td>
<td align="left">选取当前 HTML 元素</td>
</tr>
<tr>
<td align="left">$(“p.intro”)</td>
<td align="left">选取 class 为 intro 的 <p> 元素</td>
</tr>
<tr>
<td align="left">$(“p:first”)</td>
<td align="left">选取第一个 <p> 元素</td>
</tr>
<tr>
<td align="left">$(“ul li:first”)</td>
<td align="left">选取第一个 <ul> 元素的第一个 <li> 元素</td>
</tr>
<tr>
<td align="left">$(“ul li:first-child”)</td>
<td align="left">选取每个 <ul> 元素的第一个 <li> 元素</td>
</tr>
<tr>
<td align="left">$(“[href]”)</td>
<td align="left">选取带有 href 属性的元素</td>
</tr>
<tr>
<td align="left">$(“a[target&#x3D;’_blank’]”)</td>
<td align="left">选取所有 target 属性值等于 “_blank” 的 <a> 元素</td>
</tr>
<tr>
<td align="left">$(“a[target!&#x3D;’_blank’]”)</td>
<td align="left">选取所有 target 属性值不等于 “_blank” 的 <a> 元素</td>
</tr>
</tbody></table>
<h4 id="4-jQuery-方法链接"><a href="#4-jQuery-方法链接" class="headerlink" title="4.jQuery 方法链接"></a>4.jQuery 方法链接</h4><p>通过 jQuery，可以把动作&#x2F;方法链接在一起。</p>
<p>Chaining 允许我们在一条语句中运行多个 jQuery 方法（在相同的元素上）</p>
<p>下面的例子把 css()、slideUp() 和 slideDown() 链接在一起。”p1” 元素首先会变为红色，然后向上滑动，再然后向下滑动：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;).slideUp(2000).slideDown(2000);</span><br></pre></td></tr></table></figure>

<p>也可以这样写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;)</span><br><span class="line">  .slideUp(2000)</span><br><span class="line">  .slideDown(2000);</span><br></pre></td></tr></table></figure>

<p><img src="/../../source/images/1.jQuery%E4%BB%8B%E7%BB%8D/OTA%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91APP.jpg" alt="OTA业务逻辑APP"></p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>3.jQuery添加和删除元素</title>
    <url>/2022/02/23/jQuery/3.jQuery%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h3 id="一、添加元素"><a href="#一、添加元素" class="headerlink" title="一、添加元素"></a>一、添加元素</h3><h4 id="添加新的-HTML-内容"><a href="#添加新的-HTML-内容" class="headerlink" title="添加新的 HTML 内容"></a>添加新的 HTML 内容</h4><p>我们将学习用于添加新内容的四个 jQuery 方法：</p>
<ul>
<li><p>append() - 在被选元素的结尾插入内容<strong>（仍然在该元素的内部</strong>）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;span class=&quot;s2&quot;&gt;s2&lt;/span&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>追加后结果如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s2&quot;</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>prepend() - 在被选元素的开头插入内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">prepend</span>(<span class="string">&quot;在开头追加文本&quot;</span>);</span><br></pre></td></tr></table></figure>


</li>
<li><p>after() - 在被选元素之后插入内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">after</span>(<span class="string">&#x27;&lt;span class=&quot;s2&quot;&gt;s2&lt;/span&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>插入后，结果如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s2&quot;</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>before() - 在被选元素之前插入内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;img&quot;</span>).<span class="title function_">after</span>(<span class="string">&quot;在后面添加文本&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="二、删除元素"><a href="#二、删除元素" class="headerlink" title="二、删除元素"></a>二、删除元素</h3><p>如需删除元素和内容，一般可使用以下两个 jQuery 方法：</p>
<h5 id="1-remove-删除被选元素（及其子元素）"><a href="#1-remove-删除被选元素（及其子元素）" class="headerlink" title="1.remove() - 删除被选元素（及其子元素）"></a>1.remove() - 删除被选元素（及其子元素）</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(&quot;#div1&quot;).remove();</span><br></pre></td></tr></table></figure>

<h5 id="2-empty-从被选元素中删除子元素-元素本身不会被删除"><a href="#2-empty-从被选元素中删除子元素-元素本身不会被删除" class="headerlink" title="2.empty() - 从被选元素中删除子元素(元素本身不会被删除)"></a>2.empty() - 从被选元素中删除子元素(元素本身不会被删除)</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(&quot;#div1&quot;).empty();</span><br></pre></td></tr></table></figure>

<h5 id="3-过滤被删除的元素"><a href="#3-过滤被删除的元素" class="headerlink" title="3.过滤被删除的元素"></a>3.过滤被删除的元素</h5><p>jQuery remove() 方法也可接受一个参数，允许您对被删元素进行过滤。</p>
<p>该参数可以是任何 jQuery 选择器的语法。</p>
<p>下面的例子删除 class&#x3D;”italic” 的所有 <p> 元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).remove(&quot;.italic&quot;);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>2.jQuery获取和设置内容</title>
    <url>/2022/02/22/jQuery/2.jQuery%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AE%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h3 id="一、jQuery捕获"><a href="#一、jQuery捕获" class="headerlink" title="一、jQuery捕获"></a>一、jQuery捕获</h3><h4 id="1-获得内容-text-、html-以及-val"><a href="#1-获得内容-text-、html-以及-val" class="headerlink" title="1.获得内容 - text()、html() 以及 val()"></a>1.获得内容 - text()、html() 以及 val()</h4><p>三个简单实用的用于 DOM 操作的 jQuery 方法：</p>
<ul>
<li><strong>text()</strong> - 设置或返回所选元素的文本内容</li>
<li><strong>html()</strong> - 设置或返回所选元素的内容（包括 HTML 标签）</li>
<li><strong>val()</strong> - 设置或返回表单字段的值</li>
</ul>
<p>下面的例子演示如何通过 jQuery text() 和 html() 方法来获得内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;Text: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">text</span>());</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;HTML: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">html</span>());</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>这是段落中的 <span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>显示文本<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>显示 HTML<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面的例子演示如何通过 jQuery val() 方法获得输入字段的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;值为: &quot;</span> + $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>取属性 - attr()</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>($(<span class="string">&quot;#runoob&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-attr-和-prop-的区别介绍"><a href="#2-attr-和-prop-的区别介绍" class="headerlink" title="2.attr 和 prop 的区别介绍:"></a>2.<strong>attr</strong> 和 <strong>prop</strong> 的区别介绍:</h4><p>对于 HTML 元素本身就带有的固有属性，在处理时，使用 <strong>prop</strong> 方法。</p>
<p>对于 HTML 元素我们自己自定义的 DOM 属性，在处理时，使用 <strong>attr</strong> 方法。</p>
<p>实例 1：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.runoob.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子里 <strong><a></strong> 元素的 DOM 属性有: <strong>href、target</strong> 和 <strong>class</strong>，这些属性就是 <strong><a></strong> 元素本身就带有的属性，也是 W3C 标准里就包含有这几个属性，或者说在 IDE 里能够智能提示出的属性，这些就叫做固有属性。处理这些属性时，建议使用 <strong>prop</strong> 方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link1&quot;</span> <span class="attr">action</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;nofollow&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个例子里 <strong><a></strong> 元素的 DOM 属性有: <strong>href、id</strong> 和 <strong>action</strong>，很明显，前两个是固有属性，而后面一个 <strong>action</strong> 属性是我们自己自定义上去的，**<a>** 元素本身是没有这个属性的。这种就是自定义的 DOM 属性。处理这些属性时，建议使用 <strong>attr</strong> 方法。</p>
<h4 id="3-设置内容"><a href="#3-设置内容" class="headerlink" title="3.设置内容"></a>3.设置内容</h4><p>我们将使用前一章中的三个相同的方法来设置内容：</p>
<ul>
<li>text() - 设置或返回所选元素的文本内容</li>
<li>html() - 设置或返回所选元素的内容（包括 HTML 标记）</li>
<li>val() - 设置或返回表单字段的值</li>
</ul>
<p>下面的例子演示如何通过 text()、html() 以及 val() 方法来设置内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test1&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn2&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test2&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;#btn3&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test3&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;RUNOOB&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>设置属性 - attr()</p>
<p>下面的例子演示如何改变（设置）链接中 href 属性的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;#runoob&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;http://www.runoob.com/jquery&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>attr() 方法也允许您同时设置多个属性</p>
<p>下面的例子演示如何同时设置 href 和 title 属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#runoob&quot;</span>).<span class="title function_">attr</span>(&#123;</span><br><span class="line">        <span class="string">&quot;href&quot;</span> : <span class="string">&quot;http://www.runoob.com/jquery&quot;</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span> : <span class="string">&quot;jQuery 教程&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS 域名解析</title>
    <url>/2024/03/03/%E7%BD%91%E7%BB%9C/DNS%20%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h3 id="一、应用层的常用协议"><a href="#一、应用层的常用协议" class="headerlink" title="一、应用层的常用协议"></a>一、应用层的常用协议</h3><ul>
<li>超文本传输：http，https</li>
<li>文件传输：FTP</li>
<li>电子邮件：SMPT、POP3、IMAP</li>
<li>动态主机配置：DHCP</li>
<li>域名系统：DNS</li>
</ul>
<h3 id="二、域名"><a href="#二、域名" class="headerlink" title="二、域名"></a>二、域名</h3><p>由于IP地址不方便记忆，并且不能表达组织的名称和性质，人们设计出了域名。但实际上，为了能够访问到具体的主机，最终还是得知道目标主机的IP地址</p>
<p>域名根据级别分为<strong>顶级域名、二级域名、三级域名</strong>等</p>
<p><img src="/../../source/images/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/1.png" alt="image-20240303220919052"></p>
<h4 id="0-根域名"><a href="#0-根域名" class="headerlink" title="0.根域名"></a>0.根域名</h4><p>根域名服务器是最高层次的域名服务器。每个根域名服务器都知道所有的顶级域名服务器的域名及其IP地址。因特网上共有13个不同IP地址的根域名服务器。当本地域名服务器向根域名服务器发出查询请求时，路由器就把查询请求报文转发到离这个DNS客户最近的一个根域名服务器。这就加快了DNS的查询过程，同时也更合理地利用了因特网的资源。</p>
<h4 id="1-顶级域名"><a href="#1-顶级域名" class="headerlink" title="1.顶级域名"></a>1.顶级域名</h4><ul>
<li><p>通用顶级域名</p>
<blockquote>
<p>.com 公司</p>
<p>.net, 网络</p>
<p>.org 组织机构</p>
<p>.edu 教育</p>
<p>.gov 政府部门</p>
</blockquote>
</li>
<li><p>国家及地区顶级域名</p>
<blockquote>
<p>.cn 中国</p>
<p>.jp 日本</p>
</blockquote>
</li>
</ul>
<h4 id="2-二级域名"><a href="#2-二级域名" class="headerlink" title="2.二级域名"></a>2.二级域名</h4><p>二级域名是指顶级域名之下的域名</p>
<ul>
<li>在通用顶级域名下，它一般指域名注册人的名称，例如google、baidu、microsoft等</li>
<li>在国家及地区顶级域名下，它一般指注册类别的，例如com、edu、gov、net等</li>
</ul>
<h3 id="三、DNS"><a href="#三、DNS" class="headerlink" title="三、DNS"></a>三、DNS</h3><p>DNS的全称是：Domain Name System，译为：域名系统</p>
<p>利用DNS协议，可以将域名（比如baidu.com）解析成对应的IP地址（比如220.181.38.148）</p>
<p>DNS可以基于UDP协议，也可以基于TCP协议，服务器占用53端口</p>
<h4 id="DNS-查询过程"><a href="#DNS-查询过程" class="headerlink" title="DNS 查询过程"></a>DNS 查询过程</h4><p><img src="/../../source/images/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/2.png" alt="image-20240303220844012"></p>
<p>其完整的DNS解析过程有以下几个步骤：</p>
<p><strong>（1）查看浏览器缓存</strong></p>
<p>当用户通过浏览器访问某域名时，浏览器首先会在自己的缓存中查找是否有该域名对应的 IP 地址（若曾经访问过该域名且没有清空缓存便存在）。</p>
<p><strong>（2）查看系统缓存</strong></p>
<p>当浏览器缓存中无域名对应 IP 则会自动检查用户计算机系统 Hosts 文件 DNS 缓存是否有该域名对应 IP。</p>
<p><strong>（3）查看路由器缓存</strong></p>
<p>当浏览器及系统缓存中均无域名对应 IP 则进入路由器缓存中检查，以上三步均为客服端的 DNS 缓存。</p>
<p><strong>（4）查看ISP DNS 缓存</strong></p>
<p>当在用户客服端查找不到域名对应 IP 地址，则将进入 ISP DNS 缓存中进行查询。比如你用的是电信的网络，则会进入电信的 DNS 缓存服务器中进行查找。</p>
<p><strong>（5）询问根域名服务器</strong></p>
<p>当以上均未完成，则进入根服务器进行查询。全球仅有 13 台根域名服务器，1 个主根域名服务器，其余 12 为辅根域名服务器。根域名收到请求后会查看区域文件记录，若无则将其管辖范围内顶级域名（如.com、.cn等）服务器 IP 告诉本地 DNS 服务器。</p>
<p><strong>（6）询问顶级域名服务器</strong></p>
<p>顶级域名服务器收到请求后查看区域文件记录，若无记录则将其管辖范围内权威域名服务器的 IP 地址告诉本地 DNS 服务器。</p>
<p><strong>（7）询问权威域名（主域名）服务器</strong></p>
<p>权威域名服务器接收到请求后查询自己的缓存，如果没有则进入下一级域名服务器进行查找，并重复该步骤直至找到正确记录。</p>
<p><strong>（8）保存结果至缓存</strong></p>
<p>本地域名服务器把返回的结果保存到缓存，以备下一次使用，同时将该结果反馈给客户端，客户端通过这个 IP 地址即可访问目标Web服务器。至此，DNS递归查询的整个过程结束</p>
<p>总结如下：</p>
<blockquote>
<p>浏览器缓存——》系统hosts文件——》本地DNS解析器缓存——》本地域名服务器（本地配置区域资源、本地域名服务器缓存)——》根域名服务器——》主域名服务器——》下一级域名域名服务器 客户端——》本地域名服务器（递归查询) 本地域名服务器—》DNS服务器的交互查询是迭代查询</p>
</blockquote>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>5.jQuery过滤</title>
    <url>/2022/02/25/jQuery/5.jQuery%E8%BF%87%E6%BB%A4/</url>
    <content><![CDATA[<h4 id="缩小搜索元素的范围"><a href="#缩小搜索元素的范围" class="headerlink" title="缩小搜索元素的范围"></a>缩小搜索元素的范围</h4><p>三个最基本的过滤方法是：first(), last() 和 eq()，它们允许您基于其在一组元素中的位置来选择一个特定的元素。</p>
<p>其他过滤方法，比如 filter() 和 not() 允许您选取匹配或不匹配某项指定标准的元素。</p>
<h5 id="jQuery-first-方法"><a href="#jQuery-first-方法" class="headerlink" title="jQuery first() 方法"></a>jQuery first() 方法</h5><p>first() 方法返回被选元素的首个元素。</p>
<p>下面的例子选取首个 <div> 元素内部的第一个 <p> 元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div p&quot;</span>).<span class="title function_">first</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="jQuery-last-方法"><a href="#jQuery-last-方法" class="headerlink" title="jQuery last() 方法"></a>jQuery last() 方法</h5><p>last() 方法返回被选元素的最后一个元素。</p>
<p>下面的例子选择最后一个 <div> 元素中的最后一个 <p> 元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;div p&quot;</span>).<span class="title function_">last</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="jQuery-eq-方法"><a href="#jQuery-eq-方法" class="headerlink" title="jQuery eq() 方法"></a>jQuery eq() 方法</h5><p>eq() 方法返回被选元素中带有指定索引号的元素。</p>
<p>索引号从 0 开始，因此首个元素的索引号是 0 而不是 1。下面的例子选取第二个 <p> 元素（索引号 1）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="jQuery-filter-方法"><a href="#jQuery-filter-方法" class="headerlink" title="jQuery filter() 方法"></a>jQuery filter() 方法</h5><p>filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。</p>
<p>下面的例子返回带有类名 “url” 的所有 <p> 元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).<span class="title function_">filter</span>(<span class="string">&quot;.url&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="jQuery-not-方法"><a href="#jQuery-not-方法" class="headerlink" title="jQuery not() 方法"></a>jQuery not() 方法</h5><p>not() 方法返回不匹配标准的所有元素。</p>
<p>提示：not() 方法与 filter() 相反。</p>
<p>下面的例子返回不带有类名 “url” 的所有 <p> 元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;p&quot;</span>).<span class="title function_">not</span>(<span class="string">&quot;.url&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>4.CSS类和css()方法</title>
    <url>/2022/02/24/jQuery/4.CSS%E7%B1%BB%E5%92%8Ccss()%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="一、获取并设置-CSS-类"><a href="#一、获取并设置-CSS-类" class="headerlink" title="一、获取并设置 CSS 类"></a>一、获取并设置 CSS 类</h3><p>jQuery 拥有若干进行 CSS 操作的方法。我们将学习下面这些：</p>
<ul>
<li>addClass() - 向被选元素添加一个或多个类</li>
<li>removeClass() - 从被选元素删除一个或多个类</li>
<li>toggleClass() - 对被选元素进行添加&#x2F;删除类的切换操作</li>
</ul>
<p>下面的样式表将用于本页的所有例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.important</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">    <span class="attribute">font-size</span>:xx-large;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.blue</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="jQuery-addClass-方法"><a href="#jQuery-addClass-方法" class="headerlink" title="jQuery addClass() 方法"></a>jQuery addClass() 方法</h5><p>下面的例子展示如何向不同的元素添加 class 属性。当然，在添加类时，您也可以选取多个元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">  $(<span class="string">&quot;div&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;important&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>您也可以在 addClass() 方法中规定多个类：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;body div:first&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;important blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="jQuery-removeClass-方法"><a href="#jQuery-removeClass-方法" class="headerlink" title="jQuery removeClass() 方法"></a>jQuery removeClass() 方法</h5><p>下面的例子演示如何在不同的元素中删除指定的 class 属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery-toggleClass-方法"><a href="#jQuery-toggleClass-方法" class="headerlink" title="jQuery toggleClass() 方法"></a>jQuery toggleClass() 方法</h2><p>下面的例子将展示如何使用 jQuery toggleClass() 方法。该方法对被选元素进行添加&#x2F;删除类的切换操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;h1,h2,p&quot;</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="二、css-方法"><a href="#二、css-方法" class="headerlink" title="二、css() 方法"></a>二、css() 方法</h3><blockquote>
<p>css() 方法设置或返回被选元素的一个或多个样式属性。</p>
</blockquote>
<h5 id="返回-CSS-属性"><a href="#返回-CSS-属性" class="headerlink" title="返回 CSS 属性"></a>返回 CSS 属性</h5><p>如需返回指定的 CSS 属性的值，请使用如下语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">css(&quot;propertyname&quot;);</span><br></pre></td></tr></table></figure>

<p>下面的例子将返回首个匹配元素的 background-color 值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="设置-CSS-属性"><a href="#设置-CSS-属性" class="headerlink" title="设置 CSS 属性"></a>设置 CSS 属性</h5><p>如需设置指定的 CSS 属性，请使用如下语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">css(&quot;propertyname&quot;,&quot;value&quot;);</span><br></pre></td></tr></table></figure>

<p>下面的例子将为所有匹配元素设置 background-color 值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="设置多个-CSS-属性"><a href="#设置多个-CSS-属性" class="headerlink" title="设置多个 CSS 属性"></a>设置多个 CSS 属性</h5><p>如需设置多个 CSS 属性，请使用如下语法：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">css(&#123;<span class="string">&quot;propertyname&quot;</span>:<span class="string">&quot;value&quot;</span>,<span class="string">&quot;propertyname&quot;</span>:<span class="string">&quot;value&quot;</span>,...&#125;);</span><br></pre></td></tr></table></figure>

<p>下面的例子将为所有匹配元素设置 background-color 和 font-size：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">css</span>(&#123;<span class="string">&quot;background-color&quot;</span>:<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;200%&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
</search>
